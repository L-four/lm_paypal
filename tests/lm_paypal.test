<?php
// $Id$

class LmPaypalTestCase extends DrupalWebTestCase {

  function getInfo() {
    return array(
      'name' => t('Basic LM Paypal functionality'),
      'description' => t('Process Paypal actions.'), // TODO: write better description
      'group' => t('LM Paypal'),
    );
  }

  /**
   * SimpleTest core method: code run before each and every test method.
   */
  function setUp() {
    // Always call the setUp() function from the parent class.
    parent::setUp('lm_paypal', 'dblog');

    // Create users.
    $this->admin_user = $this->drupalCreateUser(array('administer lm_paypal'));
    $this->web_user = $this->drupalCreateUser();

    // Clear out the Watchdog table.
    $this->emptyWatchdog();
  }

  /**
   * SimpleTest core method: code run after each and every test method.
   */
  function tearDown() {
    // Check for watchdog errors
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Always call the tearDown() function from the parent class.
    parent::tearDown();
  }


  /**
   * Test basic stuff
   */
  function testLmPaypal() {
    // Configure for PayPal sandbox.
    $email = 'seller@paypalsandbox.com'; // $this->randomName() . '@' . $this->randomName() . '.com';
    variable_set('lm_paypal_business', $email);
    variable_set('lm_paypal_host', 'www.sandbox.paypal.com');
    variable_set('lm_paypal_ipns_max_age', 120);
    variable_set('lm_paypal_debug', TRUE);
    variable_set('lm_paypal_obey_test_ipns', TRUE);

    // Check Settings page.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/settings/lm_paypal');
    $this->assertField('lm_paypal_business', t('Business name field not found'));
    // TODO: other fields?

    // Check (empty) Saved IPNs page.
    db_query('DELETE FROM {lm_paypal_ipns}');
    $this->drupalGet('admin/settings/lm_paypal/ipns');
    $this->assertText(t('No ipns found.'), t('Empty IPNs list message found'));
    $this->assertField('filter', t('Basic filter field found on IPNs list'));
    $this->drupalLogout();

    // Post a canned IPN to the service, see what happens
    $out = $this->postPreparedIpn('ipn-web_accept-inprogress.txt', $this->web_user);


    // DEBUG - dump all IPNs
    $result = db_query('SELECT * FROM {lm_paypal_ipns}');
    while ($ipn = db_fetch_object($result)) {
      error_log("IPN: " . print_r($ipn, TRUE));
    }
    // DEBUG END


  // TODO: test positive AND negative cases
    // Check (non empty) Saved IPNs page.
    /*
    $this->drupalGet('admin/settings/lm_paypal/ipns');
    $this->assertNoText(t('No ipns found.'), t('Empty IPNs list message found'));
    $this->assertField('filter', t('Basic filter field found on IPNs list'));
    // TODO: check non-empty list
    // TODO: check filter functionality
    */


    // $this->drupalLogout();

/*
    // And another
    $filename = drupal_get_path('module', 'lm_paypal') . '/tests/ipn-web_accept-completed.txt';
    $post = unserialize(file_get_contents($filename, TRUE));
    // $post['receiver_email'] = $email; // fixup sample POST to match our config
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post));

    // Check Saved IPNs page
    $this->drupalGet('admin/settings/lm_paypal/ipns');
    $this->assertText(t('No ipns found.'), t('Empty IPNs list message found'));
    $this->assertField('filter', t('Filter field found on IPNs list'));
*/
  }



  function postPreparedIpn($filename, $user = NULL) {
    $filename = drupal_get_path('module', 'lm_paypal') . '/tests/' . $filename;
    $post = unserialize(file_get_contents($filename, TRUE));

    // If $user is passed, we need to mess with the IPN, so paypal won't validate.
    // Disable IPN validation while we perform this IPN.
    if ($user) {
      $custom = array(
        'uid' => $this->web_user->uid, // user making the payment
      );
      $post['custom'] = serialize($custom);

      variable_set('lm_paypal_skip_validation', TRUE);
    }

    $content = $this->curlExec(
      array(
        CURLOPT_URL => $this->getAbsoluteUrl('lm_paypal/ipn'),
        CURLOPT_POST => TRUE,
        CURLOPT_POSTFIELDS => $post,
      )
    );

    // Turn IPN validation back on
    variable_set('lm_paypal_skip_validation', FALSE);

    return $content;
  }












  /**
   * Check to see if any messages with severity $severity or higher have been
   * recorded by watchdog(). This requires the dblog module to be enabled.
   *
   * @param $severity
   *   (optional) The error level to start warning at, defaults to WATCHDOG_ERROR.
   * @param $reset
   *   (optional) If TRUE then delete ALL entries from the watchdog tables afterwards.
   * @return
   *   TRUE if any errors were found, FALSE otherwise.
   */
  function assertNoWatchdogErrors($severity = WATCHDOG_ERROR, $reset = TRUE) {
    if (!module_exists('dblog')) {
      return FALSE;
    }

    include_once drupal_get_path('module', 'dblog') .'/dblog.admin.inc';
    $levels = watchdog_severity_levels();

    // Check if there are any errors in the watchdog log.
    $found = FALSE;
    $result = db_query('SELECT type, severity, message, variables FROM {watchdog}');
    while ($dblog = db_fetch_object($result)) {
      if ($dblog->severity <= $severity) {
        $vars = array(
          '%type' => t($dblog->type),
          '!severity' => $levels[$dblog->severity],
          '!message' => _dblog_format_message($dblog),
        );
        $this->fail(t('Watchdog-!severity (%type) !message', $vars));
        $found = TRUE;
      }
    }

    // Delete all messages from watchdog log if requested.
    if ($reset) {
      $this->emptyWatchdog();
    }

    return $found;
  }

  /**
   * Delete ALL entries from the watchdog log provided by dblog.module.
   */
  function emptyWatchdog() {
    if (module_exists('dblog')) {
      db_query('DELETE FROM {watchdog}');
    }
  }

}
