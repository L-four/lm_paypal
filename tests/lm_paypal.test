<?php
// $Id$

/*
[13-Jan-2009 08:36:31] SUBSCRIPTION IPN = Array
(
    [test_ipn] => 1
    [payment_type] => instant
    [payment_date] => 17:38:22 Jan. 03, 2009 PST
    [payment_status] => Completed
    [address_status] => confirmed
    [payer_status] => verified
    [first_name] => John
    [last_name] => Smith
    [payer_email] => simpletest_CW2G@example.com
    [payer_id] => TESTBUYERID01
    [address_name] => John Smith
    [address_country] => United States
    [address_country_code] => US
    [address_zip] => 95131
    [address_state] => CA
    [address_city] => San Jose
    [address_street] => 123, any street
    [business] => seller@paypalsandbox.com
    [receiver_email] => dummy@dummy.com
    [receiver_id] => TESTSELLERID1
    [residence_country] => US
    [item_name] => ITEM_nYJFox
    [item_number] => 0
    [quantity] => 1
    [shipping] => 3.04
    [tax] => 2.02
    [mc_currency] => USD
    [mc_fee] => 0.44
    [mc_gross] => 52.34
    [mc_gross1] => 49.34
    [txn_type] => web_accept
    [txn_id] => 548954
    [notify_version] => 2.1
    [custom] => xyz123
    [charset] => windows-1252
    [verify_sign] => AFcWxV21C7fd0v3bYYYRCpSSRl31ADDFTKL8KpbikfcHwwH3QPTDWbuS
)
*/

class LmPaypalTestCase extends AbstractLmPaypalTestCase {

  function getInfo() {
    return array(
      'name' => t('Basic LM Paypal functionality'),
      'description' => t('Process Paypal actions.'), // TODO: write better description
      'group' => t('LM Paypal'),
    );
  }

  /**
   * SimpleTest core method: code run before each and every test method.
   */
  function setUp() {
    // Always call the setUp() function from the parent class.
    parent::setUp('lm_paypal', 'dblog');

    // Create users.
    $this->admin_user = $this->drupalCreateUser(array('administer lm_paypal'));
    $this->web_user = $this->drupalCreateUser();
  }

  /**
   * SimpleTest core method: code run after each and every test method.
   */
  function tearDown() {

    // Always call the tearDown() function from the parent class.
    parent::tearDown();
  }


  /**
   * Test basic stuff: processing a (fake) IPN, viewing saved IPNs. This does
   * NOT require connectivity to paypal.com.
   */
  function testLmPaypal() {
    // Disable IPN validation for this test
    variable_set('lm_paypal_skip_validation', TRUE);

    // Check Settings page.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/settings/lm_paypal');
    $check_variables = array('lm_paypal_business', 'lm_paypal_host', 'lm_paypal_ipns_max_age');
    foreach ($check_variables as $v) {
      $this->assertField($v);
      $this->assertRaw(variable_get($v, 'XXX'));
    }

    // Check (empty) Saved IPNs page.
    db_query('DELETE FROM {lm_paypal_ipns}');
    $this->drupalGet('admin/settings/lm_paypal/ipns');
    $this->assertText(t('No ipns found.'), t('Empty IPNs list message found'));
    $this->assertField('filter', t('Basic filter field found on IPNs list'));
    $this->drupalLogout();
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Attempt to post a test IPN while lm_paypal_obey_test_ipns = FALSE.
    variable_set('lm_paypal_obey_test_ipns', FALSE);
    $ipn_post = $this->postPreparedIpn('ipn-web_accept-inprogress.txt');
    $this->assertWatchdogError('test_ipn received - ignoring');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Post a test IPN and check it is (mostly) processed.
    // Validation is skipped
    variable_set('lm_paypal_obey_test_ipns', TRUE);
    $ipn_post = $this->postPreparedIpn(
      'ipn-web_accept-inprogress.txt',
      array(
        'item_number' => 1234,
        'receiver_email' => variable_get('lm_paypal_business', NULL),
        'payer_email' => $this->web_user->mail,
      )
    );
    $this->assertWatchdogError('IPN web_accept no uid, found payer_email%%');
    $this->assertWatchdogError('No web_accept processor registered for this item_number:%%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Check (non-empty) Saved IPNs page.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/settings/lm_paypal/ipns');
    $this->assertNoText(t('No ipns found.'), t('Empty IPNs list message found'));
    $this->assertField('filter', t('Basic filter field found on IPNs list'));
    $this->assertLink('1'); // the test IPN is still kept, even if it is not processed
    $this->assertLink('2'); // the second IPN should be processed
    $this->assertNoLink('3'); // there should only be two IPNs
    $this->assertRaw('admin/settings/lm_paypal/id/1'); // the first IPN is numbered 1

    // Check the IPN details page
    $this->clickLink('2');
    $check_fields = array(
      'txn_id', 'payer_email', 'first_name', 'last_name',
      'payer_id', 'payer_status', 'business',
      'item_name', 'item_number',
      'receiver_email', 'receiver_id');
    foreach ($check_fields as $field_name) {
      $this->assertRaw("<td>$field_name</td><td>$ipn_post[$field_name]</td>", "Found IPN field $field_name = $ipn_post[$field_name]");
    }
  }


  /**
   * Test IPN validation. This requires access to the PayPal validation service,
   * but not a user account.
   */
  function testLmPaypalValidation() {
    // Post an unmodified IPN from the IPN Simulator, it pass validation, then
    // fail because the payee doesn't match the site setting for lm_paypal_business.
    $ipn_post = $this->postPreparedIpn('ipn-web_accept-inprogress.txt');
    $this->assertWatchdogError('Incoming IPN received email does not match business email%%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Update the site setting to match the unmodified IPN, and try again.
    // This should emit two warnings:
    // - that the UID wasn't set, and that the buyer email address could not be
    //   found either.
    // - the item_number isn't an integer so can't be used by the system
    variable_set('lm_paypal_business', $ipn_post['receiver_email']);
    $ipn_post = $this->postPreparedIpn('ipn-web_accept-inprogress.txt');
    $this->assertWatchdogError('IPN web_accept no uid presuming uid 0, cannot find payer_email%%');
    $this->assertWatchdogError('Invalid item_number, ignoring IPN: %%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Change the email address of the web user to match the sender, and try
    // again. The first error should change to one about finding the user via
    // their email address (a fallback). The second error should still be there.
    // $this->web_user->mail = $ipn_post['payer_email'];
    $old_mail = $this->web_user->mail;
    user_save($this->web_user, array('mail' => $ipn_post['payer_email']));
    $ipn_post = $this->postPreparedIpn('ipn-web_accept-inprogress.txt');
    $this->assertWatchdogError('IPN web_accept no uid, found payer_email%%');
    $this->assertWatchdogError('Invalid item_number, ignoring IPN: %%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // This time, update the item_number in the IPN. This will fail to validate
    // because the IPN has been changed.
    $ipn_post = $this->postPreparedIpn(
      'ipn-web_accept-inprogress.txt',
      array('item_number' => 1234));
    $this->assertWatchdogError('IPN incoming NOT VERIFIED%%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Finally, disable validation (careful!) and try it again.
    variable_set('lm_paypal_skip_validation', TRUE);
    $ipn_post = $this->postPreparedIpn(
      'ipn-web_accept-inprogress.txt',
      array('item_number' => 1234));
    $this->assertWatchdogError('IPN web_accept no uid, found payer_email%%');
    $this->assertWatchdogError('No web_accept processor registered for this item_number:%%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);

    // Now, set the user email back, and send the UID in the "custom" field.
    // Validation is still disabled.
    user_save($this->web_user, array('mail' => $old_mail));
    $ipn_post = $this->postPreparedIpn(
      'ipn-web_accept-inprogress.txt',
      array(
        'item_number' => 1234,
        'custom' => serialize(array('uid' => $this->web_user->uid)),
      ));
    variable_set('lm_paypal_skip_validation', FALSE);
    $this->assertWatchdogError('No web_accept processor registered for this item_number:%%');
    $this->assertNoWatchdogErrors(WATCHDOG_WARNING);
  }

}
