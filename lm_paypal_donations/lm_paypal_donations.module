<?php

/**
 * @file
 *
 * PayPal donations interface.
 *
 * This is a Drupal module to dynamically generate PayPal buttons and processes
 * incoming PayPal IPN messages.
 */

define('LM_PAYPAL_DONATIONS', 'LM_PayPal_Donat');

// Don't change these here! Use the admin interface at admin/settings/lm_paypal
define('LM_PAYPAL_DONATIONS_THANKS_DEFAULT', '/lm_paypal/donations_thanks');

/**
 * Implementation of hook_help().
 */
function lm_paypal_donations_help($path, $arg) {
  global $_lm_paypal_welcome; // Welcome message
  global $base_url;

  $admin = l('LM PayPal Admin', 'admin/config/lm_paypal/settings');
  $access = l('administer permissions', 'admin/user/permissions');

  $help = l('LM PayPal Help', 'admin/help/lm_paypal');
  $help_dons = l('LM PayPal Donations Help', 'admin/help/lm_paypal_donations');
  $view_dons = l(t('PayPal Donations'), 'lm_paypal/donations');

  switch ($path) {
    case 'admin/help#lm_paypal_donations': // admin/help/lm_paypal_donations
      $output = $_lm_paypal_welcome;

      $output .= '<p>' . t('If you are not already familar with PayPal please go to their <a href="http://www.paypal.com">website</a> and read up.') . '</p>';

      $output .= '<p><b>' . t('Special Note') . ':</b>';
      $output .= '<ul>';
      $output .= '<li><b>' . t('This module requires the module lm_paypal to be installed, enabled and configured.') . '</b></li>';
      $output .= '</ul>';

      $output .= '<p>' . t('If you are new to this module you need to:');
      $output .= '<ul>';
      $output .= '<li>' . t("First make sure you have configured the main !admin and read !help.", array("!admin" => $admin, "!help" => $help)) . '</li>';
      $output .= '</ul>';
      $output .= '</p>';
      $output .= '<p>' . t("Ensure the right roles (usually everyone, so <b>anonymous</b> and <b>authenticated</b>!) can see the donation buttons by enabling this in !access under <b>lm_paypal_module</b> 'access lm_paypal_donate'. You can allow roles to view everyones donations using 'view lm_paypal_all_donations'.", array("!access" => $access)) . '</p>';

      $output .= '<h2>' . t('Creating Donation Buttons') . '</h2>';
      $output .= '<p>' . t('Donations buttons are displayed with php like the following which display the three types of donation:') . '</p>';

      $output .= '<pre>' . t('
&lt;?php
if (function_exists(\'lm_paypal_donate\')) {
  // 10 = amount, \'USD\' is the currency followed by a description
  print \'We would really like a $10 donation \' .
  print lm_paypal_donate(10, array(\'currency_code\' => \'USD\', \'text\' => \'donation to example.com\')) .\'&lt;br&gt;\';
  // The amount is a one element array so an text input with the one value as
  //  default
  print \'Write your own amount to give, we suggest $5\' .
  print lm_paypal_donate(array(5), array(\'currency_code\' => \'USD\', \'text\' => \'donation to example.com\')) . \'&lt;br&gt;\';
  // The amount is a multi element array so a select will be used. Note if one
  //   of the elements is itself an array that will be the default selection
  // The final two parameters are an alternative button (here we use the default)
  //   and a replacement label before the amount
  print \'We would really like a $10, or more, donation \' .
  print lm_paypal_donate(array(5,array(10),15),  array(\'currency_code\' => \'USD\', \'text\' => \'donation to example.com\', \'\', \'Donation\')) .\'&lt;br&gt;\';
}
?&gt;
        ') . '</pre>';
      $output .= '<p>' . t('It is best to check that the lm_paypal_donate function exists before using it just in case the module has been disabled.') . '</p>';
      $output .= '<p>' . t('If the button is clicked by a logged in user when the payment arrives the amount will be associated with them. Otherwise an attempt will be made to match the payers email with user emails.') . '</p>';

      $output .= '<h2>' . t('Viewing Donations') . '</h2>';
      $output .= '<p>' . t("To view all the donations that have arrived use !view_dons.", array("!view_dons" => $view_dons)) . '</p>';

      return $output;

      // This is the brief description of the module displayed on the modules page
    case 'admin/modules#description':
      // New to Drupal 5 (because the page has moved)
    case 'admin/config/modules#description':
      return t('Provides PayPal donation buttons (requires lm_paypal).');

      // This is the brief description of the module displayed on the help page
    case 'admin/help#lm_paypal_donations':
      $output = '<p>' . t('The lm_paypal_donations module.') . '</p>';
      return $output;

      // This appears at the start of the module admin page before the options
    case 'admin/config/lm_paypal_donations':
      // This appears at the start of the admin page before the options
    case 'admin/config/lm_paypal/donations':
      // New to Drupal 7 - settings has moved
    case 'admin/config/lm_paypal/donations_settings':
      $output = $_lm_paypal_welcome;

      $output .= '<p>' . t("For detailed help please read !help_dons", array("!help_dons" => $help_dons)) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function lm_paypal_donations_permission() {
  return array(
    'access lm_paypal_donate' => array(
      'title' => t('access lm_paypal_donate'),
      'description' => t('Allows users to donate.'),
    ),
    'view lm_paypal_all_donations' => array(
      'title' => t('view lm_paypal_all_donations'),
      'description' => t('Allow users to view all donations'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lm_paypal_donations_menu() {
  $items = array();

  // LM PayPal Donations Settings
  $items['admin/config/lm_paypal/donations_settings'] = array(
    'title' => 'Donations Settings',
    'description' => 'PayPal donations interface configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_donations_settings_form'),
    'access arguments' => array('administer lm_paypal'),
    'weight' => 3,
  );

  // admin - print all donations - TODO: move to /admin? fix links to it
  $items['lm_paypal/donations'] = array(
    'title' => 'PayPal Donations',
    'page callback' => 'lm_paypal_all_donations',
    'access arguments' => array('view lm_paypal_all_donations'),
    'description' => 'PayPal view All Donations',
  );

  // By default we tell Paypal to redirect users here after donating
  $items['lm_paypal/donations_thanks'] = array(
    'title' => 'LM PayPal Donation Thanks',
    'type' => MENU_CALLBACK,
    'page callback' => 'lm_paypal_donations_thanks',
    'access arguments' => array('access lm_paypal_donate'),
  );

  return $items;
}

/**
 * Settings form.
 */
function lm_paypal_donations_settings_form($form, &$form_state) {
  $form['lm_paypal_donations_thanks'] = array(
    '#type' => 'textfield',
    '#title' => t('LM PayPal donation thanks page'),
    '#default_value' => variable_get('lm_paypal_donations_thanks', LM_PAYPAL_DONATIONS_THANKS_DEFAULT),
    '#maxlength' => 100,
    '#required' => TRUE,
    '#description' => t('The page the user is sent to by paypal after a donation. The default is %link but you might want to point it at a page you have created yourself.', array('%link' => LM_PAYPAL_DONATIONS_THANKS_DEFAULT)),
  );
  return system_settings_form($form);
}






/**
 * Implements hook_lm_paypal_ipn_TXNTYPE().
 * Process a subscr IPN message.
 */
function lm_paypal_donations_lm_paypal_ipn_donate($ipn) {
  // error_log("Called lm_paypal_donations_lm_paypal_ipn_donate($ipn->txn_id)");
  _lm_paypal_process_in_donate($ipn); // Call legacy handler
  return TRUE;
}





/**
 * Process a newly arrived donation IPN message
 *
 * @param $ipn 
 *   The IPN message
 * @param $link String
 *   html link to the IPN to display in watchdog reports
 * @param $uid Integer
 *   The uid of the user associated with this IPN, zero if the user is unknown
 * @param $other Integer
 *   The extra integer passed with the uid
 * @param $item_number Integer
 *   The PayPal item_number
 */
function _lm_paypal_process_in_donate($ipn, $link, $uid, $other, $item_number) {
  if (lm_paypal_debug()) {
    watchdog(LM_PAYPAL_DONATIONS, 'in donate');
  }
  
  $record = array_merge((array) $ipn, array('uid' => $uid, 'datepaid' => time()));
  $wr = drupal_write_record('lm_paypal_donations', $record);

  if ($wr == FALSE) {
    watchdog(LM_PAYPAL_DONATIONS, 'Failed to add to donations (uid %uid)', array('%uid' => $uid), WATCHDOG_ERROR);
  }
}

/**
 * Display a dynamically generated PayPal donate button.
 *
 * @param $amount
 *   Required.
 *     If a number it is the amount of the donation. User not asked.
 *     If a single element array then a text input will appear with
 *       this as the default value for the amount.
 *     If a multi element array then a select will appear with the given
 *       values. If one of the values is itself an array that will be the
 *       default.
* @param array $options = array()
 *   (optional) Pairs of setting => custom value where setting can be:
 *
 *     'item_name': integer
 *        Textual human-readable representation of item.
 *        Default is localized string 'Donation' (ok, 'Unknown' is not a very
 *        sexy item name to display to user).
 *
 *     'item_number': integer
 *        Item number (depends on your business code)
 *        Default is 0.
 *
 *     'currency_code': string
 *        Paypal 3 letters currency code, see lm_paypal_api_get_currency().
 *        Default is default configured currency in lm_paypal main module.
 *
 *     'custom': array
 *        Keyed array of data you might want to pass through PayPal processing
 *        and get back later when processing the incoming IPN
 *
 *     'return_path': string
 *        May be this one is the only one interesting for you, you should pass
 *        a drupal path where you want to redirect your user after he procedeed
 *        his payment.
 *        Default is a page displaying the thanks message from lm_paypal main
 *        module.
 *        Note that if the path is not valid, then lm_paypal default will be
 *        used.
 * 
 *     'cancel_path': string
 *        Internal path in case of cancel. If not specified, it will use
 *        return_path setting.
 *
 *     'text': string
 *        (x)html text to display over the form (eg: 'Validate your command').
 *        Don't forget to check_plain() your text!
 *        Default is no text displayed.
 *
 *     'button_text': string
 *        Whatever you want to display on submit button.
 *
 *     'button_url': string
 *        In case you want to display a image from an external (or internal)
 *        website, use this opton to put the url.
 *        Note that if you specify this, button_text will be used as alternative
 *        text for the image.
 *
 *     'display_amount': boolean
 *        Set this to FALSE if you dont want the price to be displayed (or if
 *        you want to display it yourself in the 'text' setting).
 *        Default is amount is displayed.
 *        Note that if you gave an array of amounts, it will remain FALSE,
 *        whatever you pass to this option.
 *
 *     'hidden_fields': array
 *        Keyed array of values you want to pass as hidden values through paypal
 *        form.
 *        Advanced usage only!
 *
 *       'render' : boolean
 *        Return rendered html?
 *        defualt is TRUE
 * 
 *     More to come, module in active development.
 *
 * @return array
 *   Drupal well formated form you can then build with drupal's form API.
 *   Or FALSE if amount is not a valid positive float.
 */

function lm_paypal_donate($amount, $options = array()) {
  
  $options += array(
    'render' => TRUE,
  );
  
  if (!user_access('access lm_paypal_donate')) {
    return t('Access to PayPal donation buttons denied');
  }

  if (isset($options['item_name'])) {
    $options['item_name'] = check_plain($options['item_name']);
  }

  if (isset($options['text'])) {
    $options['text'] = check_plain($options['text']);
  }
  // dont force render
  if (isset($options['render']) && $options['render'] == TRUE) {
    $form = drupal_get_form('lm_paypal_api_payment_form', $amount, $options);
    return drupal_render($form);
  }
  return drupal_get_form('lm_paypal_api_payment_form', $amount, $options);
}

/**
 * Returns the default page that users are sent to by PayPal after donating.
 *
 * @return
 *   A string containing the page contents.
 */
function lm_paypal_donations_thanks() {
  // TODO: make user configurable and/or themeable
  return t('<h2>Thank you!</h2><p>If the system is not too busy then your donation will arrive shortly. At worse it will only take a few hours.</p><p>Once again, thanks!</p>');
}

/**
 * Implements hook_user_view().
 */
function lm_paypal_donations_user_view($account, $view_mode) {
  global $user;
  $uid = isset($account->uid) ? $account->uid : 0;
  // In the "my account" view area show all donations
  if ($view_mode == 'full' && (user_access('administer lm_paypal') || $user->uid == $account->uid)) {
    $account->content['lm_paypal_donations'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Paypal Donations'),
      '#markup' => '',
      '#weight' => 7,
    );
    $account->content['lm_paypal_donations']['donations'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Donations:'),
      '#markup' => lm_paypal_donations($uid, $per_page = 10),
    );
  }
}

/**
 * View all donations
 */
function lm_paypal_all_donations() {
  return lm_paypal_donations(0);
}

/**
 * View donations from one user
 */
function lm_paypal_my_donations($uid) {
  return lm_paypal_donations($uid);
}

/**
 * View donations
 *
 * @param
 *   if a uid is passed then just print out details of that donation
 */
function lm_paypal_donations($uid, $per_page = 50) {
  global $user;

  if ($uid == NULL || !is_numeric($uid) || intval($uid) != $uid) {
    $uid = 0;
  }

  if (!($user->uid == $uid || user_access('view lm_paypal_all_donations'))) {
    return t('<em>You do not have permission to view donations</em>');
    /*
    drupal_access_denied();
    return '';
    */
  }

  $header = array(
    array(
      'data' => t('User'),
      'field' => 'u.name',
    ),
    array(
      'data' => t('Item Name'),
      'field' => 'd.item_name',
    ),
    array(
      'data' => t('Date Paid'),
      'field' => 'd.datepaid',
      'sort' => 'desc',
    ),
    array(
      'data' => t('Amount'),
      'field' => 'd.mc_gross',
    ),
    array(
      'data' => t('Currency'),
      'field' => 'd.mc_currency',
    ),
  );

  $sql = "SELECT u.name, d.item_name, d.uid, d.datepaid, d.mc_gross, d.mc_currency FROM {lm_paypal_donations} d INNER JOIN {users} u ";
  
  $select = db_select('lm_paypal_donations', 'd')
    ->fields('d', array('item_name', 'uid', 'datepaid', 'mc_gross', 'mc_currency'))
    ->extend('TableSort')
    ->extend('PagerDefault')
    ->orderByHeader($header)
    ->limit($per_page)
    ->fields('u', array('name'));
  $select->innerJoin('users', 'u', 'd.uid = u.uid');
  // FIXME: figure out what would be good to filter on
  // $status = $_SESSION['lm_paypal_dons_filter'];
  
  $status = 'all';
  if ($status != 'all') {
    $select->condition('s.status', $status);
  }
  
  if ($uid != 0) {
    $select->condition('d.uid', $uid);
  }
  
  $result = $select->execute();
  
  $rows = array();
  foreach ($result as $don) {
    $rows[] = array(
      'data' => array(
        l($don->name, "user/$don->uid"),
        check_plain($don->item_name),
        format_date($don->datepaid, 'small'),
        check_plain($don->mc_gross),
        check_plain($don->mc_currency),
      ),
    );
  }
  if (empty($rows)) {
    $rows[] = array(array(
        'data' => t('No donations found.'),
        'colspan' => 3,
      ));
  }

  return theme('table', array('header' => $header, 'rows' => $rows)) . theme('pager', array('tags' => NULL, 'element' => 0));
}


/**
 * Implementation of hook_block.
 * Only used for testing - really should be in a mock module or something.
 */
/**/

function lm_paypal_donations_block_info() {
  return array(
    'lm_paypal_donation_block_example' => array(
      'info' => t('LM PayPal Donations Examples'),
      'weight' => 0,
      'status' => 1,
      'region' => 'sidebar_first',
      'cache' => DRUPAL_CACHE_GLOBAL
    ),
    'lm_paypal_donation_block' => array(
      'info' => t('LM PayPal Donations Block'),
      'weight' => 0,
      'status' => 1,
      'region' => 'sidebar_first',
      'cache' => DRUPAL_CACHE_GLOBAL
    )
  );
}

function lm_paypal_donations_block_view($delta) {
  $func = __FUNCTION__ . '_' . $delta ."_content";
  $subject = '';
  $content = array();
  if (function_exists($func)) {
    $content = $func($subject);
  }
  return array(
    'subject' => $subject,
    'content' => $content
  );
}
function lm_paypal_donations_block_configure($delta) {
  $func = __FUNCTION__ . '_' . $delta ."_form";
  $form = array();
  if (function_exists($func)) {
    $form = $func();
  }
  return $form;
}
function lm_paypal_donations_block_save($delta, $edit) {
  $func = __FUNCTION__ . '_' . $delta;
  if (function_exists($func)) {
    $func($edit);
  }
}
function lm_paypal_donations_block_save_lm_paypal_donation_block($edit){
  variable_set('paypal_donations_block', $edit['config']);
}
function lm_paypal_donations_block_configure_lm_paypal_donation_block_form(){
  $vars = variable_get('paypal_donations_block', array(
    'description' => 'Please donate 1000',
    'amount' => '100',
    'currency_code' => 'USD',
    'type' => 'text',
  ));
  $form['config'] = array(
    '#tree' => TRUE,
    'description' => array(
      '#title' => 'Description',
      '#type' => 'textarea',
      '#description' => 'A description to appear above the donation form.',
      '#default_value' => $vars['description'],
    ),
    'type' => array(
      '#title' => 'Field Type',
      '#type' => 'select',
      '#options' => array(
        'textfield' => 'Textfield',
        'select' => 'Select',
        'fixed' => 'Fixed',
      ),
      '#description' => 'How to display the form.',
      '#default_value' => $vars['type'],
    ),
    'amount' => array(
      '#title' => 'Amount',
      '#type' => 'textarea',
      '#description' => 'An single amount e.g. 10 or multiple amounts for select list type separated by | e.g. 5|10|15',
      '#default_value' => $vars['amount'],
    ),
    'currency_code' => array(
      '#title' => 'Currency Code',
      '#type' => 'textfield',
      '#description' => 'Currency Code e.g. USD, AUD, JPY, EUR',
      '#default_value' => $vars['currency_code'],
    ),
  );
  return $form;
}
function lm_paypal_donations_block_view_lm_paypal_donation_block_content(&$subject){
  $subject = t('Simple LM Paypal Donations Block');
  $vars = variable_get('paypal_donations_block', array(
    'description' => 'Please donate 1000',
    'amount' => '100',
    'currency_code' => 'USD',
    'type' => 'textfield',
  ));
  $amount = array();
  switch ($vars['type']) {
    case 'textfield':
      $amount = array(trim($vars['amount']));
      break;
    
    case 'select':
      $amount = explode('|', $vars['amount']);
      break;

    case 'fixed':
      $amount = trim($vars['amount']);
      break;

    default:
      $amount = array(0);
      break;
  }
  $content = array(
      'donation form' => array(
        'form' => lm_paypal_donate(
            $amount,
            array(
              'currency_code' => $vars['currency_code'],
              'display_amount' => TRUE,
              'text' => $vars['description'],
              'render' => FALSE,
            )
          ),
        '#suffix' => '<br>'
      ),
  );
  return $content;
}
function lm_paypal_donations_block_view_lm_paypal_donation_block_example_content(&$subject){
  $subject = t('Dummy LM Paypal Donations Block');
  $content = array(
      // 10 = amount, 'USD' is the currency followed by a description
      'donation 10' => array(
        '#markup' => 'We would really like a $10 donation',
      ),
      'donation 10 form' => array(
        'form' => lm_paypal_donate(
            10000,
            array(
              'currency_code' => 'JPY',
              'display_amount' => TRUE,
              'text' => 'donation to example.com',
              'render' => FALSE,
            )
          ),
        '#suffix' => '<br>'
      ),

     // The amount is a one element array so an text input with the one value as
     //  default
     'donation own' => array(
        '#markup' => 'Write your own amount to give, we suggest $5',
      ),
      'donation own form' => array(
        'form' => lm_paypal_donate(
          array(5),
          array(
            'currency_code' => 'EUR',
            'display_amount' => TRUE,
            'text' => 'donation to example.com',
            'render' => FALSE,
          )
        ),
        '#suffix' => '<br>'
      ),

     // The amount is a multi element array so a select will be used. Note if one
     //   of the elements is itself an array that will be the default selection
     // The final two parameters are an alternative button (here we use the default)
     //   and a replacement label before the amount
     'donation gt 10' => array(
        '#markup' => 'We would really like a $10, or more, donation',
      ),
      'donation gt 10' => array(
        'form' => lm_paypal_donate(
        array(
          5,
          array(10),
           15
        ),
        array(
          'currency_code' =>'AUD',
          'text' => 'donation to example.com',
          'display_amount' => TRUE,
          'item_name' =>'Donation',
          'render' => FALSE,
        )
      ),
        '#suffix' => '<br>'
      )
   );
  return $content;
}
 /**/
