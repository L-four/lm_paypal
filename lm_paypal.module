<?php
// $Id$

/**
 * @file
 *
 * PayPal interface.
 */

/**
 * Implementation of hook_perm().
 */
function lm_paypal_perm() {
  return array('administer lm_paypal');
}

/**
 * Implementation of hook_menu().
 */
function lm_paypal_menu() {
  $items = array();

  // use tabs for menus, main config on the default
  $items['admin/settings/lm_paypal'] = array(
    'file' => 'lm_paypal.admin.inc',
    'title' => 'LM PayPal',
    'description' => 'LM PayPal is a set of modules that interface to paypal.com',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_settings_form'),
    'access arguments' => array('administer lm_paypal'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Tab 1 : LM Paypal Settings
  $items['admin/settings/lm_paypal/settings'] = array(
    'title' => 'LM Paypal Settings',
    'description' => 'PayPal IPN interface configuration.',
    'access arguments' => array('administer lm_paypal'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  // Tab 2 : View saved IPNs
  $items['admin/settings/lm_paypal/ipns'] = array(
    'file' => 'lm_paypal.admin.inc',
    'title' => 'Saved IPNs',
    'description' => 'Show details of all saved PayPal IPN\'s',
    'page callback' => 'lm_paypal_ipns',
    'access arguments' => array('administer lm_paypal'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Display the details of a saved IPN - internal
  $items['admin/settings/lm_paypal/id'] = array(
    'file' => 'lm_paypal.admin.inc',
    'title' => 'Show ID Details',
    'type' => MENU_CALLBACK,
    'page callback' => 'lm_paypal_id',
    'access arguments' => array('administer lm_paypal'),
    'description' => 'Show details of a single saved IPN',
  );

  // URL for PayPal to send IPN (incoming payment notifications) to.
  $items['lm_paypal/ipn'] = array(
    'file' => 'lm_paypal.ipn.inc',
    'title' => 'LM PayPal Incoming IPN',
    'type' => MENU_CALLBACK,
    'page callback' => 'lm_paypal_ipn_in',
    'access callback' => TRUE,
  );

  return $items;
}

// =====================================================================
// Below this line, module has not been "cleaned up"













define('LM_PAYPAL', 'LM_PayPal');

// Don't change these here! Use the admin interface at admin/settings/lm_paypal
define('LM_PAYPAL_HOST_DEFAULT', 'www.paypal.com');
define('LM_PAYPAL_OBEY_TEST_IPNS_DEFAULT', 0);
define('LM_PAYPAL_IPNS_MAX_AGE_DEFAULT', 5 * 24); // Max hours to keep IPNS

// Never change these unless you really know what you are doing?
define('LM_PAYPAL_DEBUG_DEFAULT', FALSE);
define('LM_PAYPAL_VALIDATE_TIMEOUT', 30);





/**
 * Get a list of currencies supported by PayPal, in a format suitable for
 * looking up, or using as #options in a form.
 */
function _lm_paypal_get_currency_info($code = NULL) {
  static $currency_info;
  if (!isset($currency_info)) {
    $currency_info = array(
      'USD' => array('$', t('U.S. Dollar')),
      'GBP' => array('&#163;', t('Pound Sterling')),
      'EUR' => array('Euro', t('Euro')), // &euro; causes some font/browser issues
      'AUD' => array('A$', t('Australian Dollar')),
      'CAD' => array('Can$', t('Canadian Dollar')),
      'JPY' => array('&#165;', t('Japanese Yen')),
      'CHF' => array('CHF', t('Swiss Franc')), // Yes - it really is writen as CHF
      'CZK' => array('Kc', t('Czech Koruna')),
      'DKK' => array('kr', t('Danish Krone')),
      'HKD' => array('HK$', t('Hong Kong Dollar')),
      'HUF' => array('Ft', t('Hungarian Forint')),
      'NOK' => array('kr', t('Norwegian Krone')),
      'NZD' => array('NZ$', t('New Zealand Dollar')),
      'PLN' => array('zl', t('Polish Zloty')), // I cannot find the HTML character for a crossed l
      'SEK' => array('kr', t('Swedish Krona')),
      'SGD' => array('S$', t('Singapore Dollar')),
    );
  }

  return $code ? $currency_info[$code] : $currency_info;
}


function _lm_paypal_get_currencies() {
  $currencies = array();
  foreach (_lm_paypal_get_currency_info() as $code => $info) {
    $currencies[$code] = $info[1];
  }
  return $currencies;
}


/**
 * Finds the currency symbol corresponding to a three letter code
 *
 * @param $ccc
 *   A three letter currency code such as USD
 * @return
 *   A currency symbol such as $
 */
function lm_paypal_ccc2symbol($ccc) {
  $currency_info = _lm_paypal_get_currency_info($ccc);
  return $currency_info[0];
}



/**
 * Initialize global variables
 * Note: Originally this was a hook_init() function but a user was getting
 * hit by this function being called before common.inc was loaded.
 *
 *
 * TODO: get rid of this grotty design
 */
function _lm_paypal_ini() {
  // dsm("_lm_paypal_ini()");

  global $_lm_paypal_debug;  // Is debugging enabled
  global $_lm_paypal_welcome;  // Welcome message
  global $_lm_paypal_host;  // Where to send paypal requests/verifies to
  global $_lm_paypal_business;  // what is my business email
  global $_lm_paypal_obey_test_ipns;  // Treat test IPN messages as real
  global $_lm_paypal_ipns_max_age;  // How many hours to keep old IPNs for
  global $_lm_paypal_period_units_option;

  static $inited = 0;

  if ($inited) {
    return;
  }
  $inited = 1;

  $_lm_paypal_debug = variable_get('lm_paypal_debug', LM_PAYPAL_DEBUG_DEFAULT);
  $_lm_paypal_host = variable_get('lm_paypal_host', LM_PAYPAL_HOST_DEFAULT);
  $_lm_paypal_business = variable_get('lm_paypal_business', '');
  $_lm_paypal_obey_test_ipns = variable_get('lm_paypal_obey_test_ipns', LM_PAYPAL_OBEY_TEST_IPNS_DEFAULT);
  $_lm_paypal_ipns_max_age = variable_get('lm_paypal_ipns_max_age', LM_PAYPAL_IPNS_MAX_AGE_DEFAULT);

  $_lm_paypal_welcome = '<p>'. t('Welcome to the LM PayPal modules for Drupal.') .'</p>';

  //$_lm_paypal_welcome .= '<p><b>'. t('These modules are still undergoing development so it is strongly advised that you to test them out against the PayPal Sandbox first.') .'</b></p>';
  // Note: NOT used to format messages for the user. See lm_paypal_unit2str()
  $_lm_paypal_period_units_option = array(
    //'' => t('default'),
    'D' => t('Days'),
    'W' => t('Weeks'),
    'M' => t('Months'),
    'Y' => t('Years'),
  );

  // Call all the _ini functions of all the lm_paypal modules.
  // This is mostly to ensure that all the web_accept_register's are called.
  foreach (module_list() as $module) {
    if (strncmp($module, "lm_paypal", 9) == 0) {
      $f = '_'. $module .'_ini';
      if (function_exists($f)) {
        $f();
      }
    }
  }
}

/**
 * Implementation of hook_help().
 */
/*
 function lm_paypal_help($path, $arg) {
  _lm_paypal_ini();
  global $_lm_paypal_welcome;  // Welcome message

  $admin = l('LM PayPal Admin', 'admin/settings/lm_paypal');
  $access = l('administer permissions', 'admin/user/permissions');

  $help = l('LM PayPal Help', 'admin/help/lm_paypal');
  $ipn = url('lm_paypal/ipn', array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE));

  switch ($path) {
    case 'admin/help#lm_paypal':
      $output = $_lm_paypal_welcome;

      $output .= '<p>'. t('If you are not already familar with PayPal please go to their <a href="http://www.paypal.com">website</a> and read up.') .'</p>';
      $output .= '<p>'. t('If you are new to this module you need to:');
      $output .= '<ul>';
      $output .= '<li>'. t("Update the site specific settings via !admin. Normally you only need to provide your PayPal Business/Premier Email.", array("!admin" => $admin)) .'</li>';
      $output .= '<li>'. t("On PayPal login to your Business/Premier account. Under <b>Profile</b> go to <b>Instant Payment Notification Preferences</b> and enable IPN.") .'</li>';
      $output .= '<li>'. t("To have lm_paypal handle IPN messages that it did not generate, such as a Send Money originated from PayPal.com, also set the IPN URL to: <pre>!ipn</pre><br/>However it could be set to another url perhaps for ecommerce", array("!ipn" => $ipn)) .'</li>';
      $output .= '<li>'. t('While on PayPal if you plan to handle multiple currencies then go to <b>Payment Receiving Preferences</b>. For the entry <b>Block payments sent to me in a currency I do not hold:</b> I suggest setting it either <b>Yes</b> (to block them) or <b>No, accept them and convert them to ...</b>. If set on <b>Ask Me</b> then each payment will have to be manually confirmed!') .'</li>';
      $output .= '<li>'. t('Next configure one of the LM PayPal services such as subscriptions, donations or paid adverts') .'</li>';
      $output .= '</ul>';
      return $output;

      // This is the brief description of the module displayed on the modules page
    case 'admin/modules#description':
      // New to Drupal 5 (because the page has moved)
    case 'admin/settings/modules#description':
      return t("Lowest level PayPal interface required by other LM PayPal modules. Once enabled go to !admin and configure the site specific settings.", array("!admin" => $admin));

      // Help at the start of admin/settings/lm_paypal
    case 'admin/settings/lm_paypal':
      $output = $_lm_paypal_welcome;

      $output .= '<p>'. t("If you are looking to configure LM PayPal please follow the instructions !help.", array("!help" => $help)) .'</p>';
      return $output;

      //case 'admin/help#settings/lm_paypal': // causes a [more help] to appear
      //case 'admin/help/settings/lm_paypal': // clicking [more help] gets this
      // This appears at the start of the module settings page before the options
    case 'admin/settings/lm_paypal':
      $output = $_lm_paypal_welcome;

      $output .= '<p>'. t("If you have not done so already you will need to configure the LM PayPal modules and your PayPal business account.  Please follow the instructions !help.", array("!help" => $help)) .'</p>';
      return $output;

      // This appears at the start of the IPNs viewing page before the options
    case 'admin/settings/lm_paypal/ipns':
      $output = $_lm_paypal_welcome;

      $output .= '<p>'. t('These are the IPN messages received from PayPal.') .'</p>';
      return $output;
  }
}
*/





/**
 * Validates a formelement to ensure it is shaped like an email
 *
 * @param $formelement
 *   The form element to be checked.
 *
 * If the element fails any of the tests form_set_error() is called.
 */
function lm_paypal_is_email_shaped($formelement) {
  $biz = $formelement['#value'];
  $fieldname = $formelement['#name'];
  if (strpos($biz, '@') === FALSE) {
    form_set_error($fieldname, t('Email address required.'));
  }
}

/**
 * Validates a formelement to ensure it is a number inside a given range.
 *
 * @param $formelement
 *   The form element to be checked.
 * @param $min
 *   If present the minimum value the element is allowed to have
 * @param $max
 *   If present the maximum value the element is allowed to have
 *
 * If the element fails any of the tests form_set_error() is called.
 * Based on code by Coyote see http://drupal.org/node/36899
 */
function lm_paypal_is_integer_between($formelement, $min=NULL, $max=NULL) {
  $thevalue = $formelement['#value'];
  $fieldname = $formelement['#name'];
  if (is_numeric($thevalue)) {
    $thevalue = $thevalue + 0;
  }
  else {
    form_set_error($fieldname, t('Item entered must be an integer.'));
  }
  if (!is_int($thevalue)) {
    form_set_error($fieldname, t('Item entered must be an integer.'));
  }
  else {
    if (isset($min) && ($thevalue < $min)) {
      form_set_error($fieldname, t('Item entered must be no smaller than:%min', array('%min' => $min)));
    }
    else if (isset($max) && ($thevalue > $max)) {
      form_set_error($fieldname, t('Item entered must be no greater than:%max', array('%max' => $max)));
    }
  }
}




/**
 * Register the handler function for a range of item_numbers
 *
 * @param $function_name
 *   The function to call when an item number in the given range arrives
 * @param $min
 *   The minimum item_number in the range
 * @param $max
 *   The maximum item_number in the range
 * @return
 *   If $function_name is set then nothing is returned. If null then
 *   the entire registered array of ($fun, $min, $max) is returned.
 */
function lm_paypal_web_accept_register($function_name = NULL, $min = NULL, $max = NULL) {
  static $ranges = NULL;

  if (is_null($function_name)) {
    return $ranges;
  }

  if (is_null($ranges)) {
    $ranges = array();
  }
  $ranges[] = array('fun' => $function_name, 'min' => $min, 'max' => $max);
}

/**
 * Mark a saved IPN as processed.
 *
 * @param $ipn
 *  The IPN to be marked.
 */
function lm_paypal_mark_processed($ipn) {
  // It seems that drupal_write_record() doesn't like fields of type 'serial'
  // $object = array('processed' => TRUE);
  // drupal_write_record('lm_paypal_ipns', $object, array('id' => $ipn->id));
  $sql = "UPDATE {lm_paypal_ipns} SET processed = 1 WHERE id = %d";
  $update = db_query($sql, $ipn->id);
}

function lm_paypal_already_processed($txn_id) {
  // Has this transaction already been processed?
  // Changed to allow for echecks which can be payment_status = 'Pending' for
  //  quite a while
  $result = db_query("SELECT COUNT(*) FROM {lm_paypal_ipns} WHERE txn_id = '%s' and processed = '1' and payment_status = 'Completed'", $txn_id);
  return db_result($result);
}

/**
 * Finds the option value corresponding to a period unit
 *
 * @param $count
 *   The number of units
 * @param $unit
 *   A period unit such 'D' or 'W'
 * @return
 *   The string representation of the unit such as '1 day' or '3 weeks'
 */
function lm_paypal_unit2str($count, $unit) {
  switch ($unit) {
    case 'D':
      return format_plural($count, '1 day', '@count days');
    case 'W':
      return format_plural($count, '1 week', '@count weeks');
    case 'M':
      return format_plural($count, '1 month', '@count months');
    case 'Y':
      return format_plural($count, '1 year', '@count years');
    default:
      drupal_set_message("Unknown unit-type: $unit", 'error');
      return $count .' '. $unit;
  }
}


/**
 * Returns the number of days given a period and unit
 *
 * @param $period
 *   An integer period
 * @param $unit
 *   A time unit such as 'D', 'W' ...
 * @return
 *   The equivalent number of days
 */
function lm_paypal_period_unit2days($period, $unit) {
  $multiply = 1;
  switch ($unit) {
    case 'D':
      $multiply = 1;
      break;
    case 'W':
      $multiply = 7;
      break;
    case 'M':
      $multiply = 31;
      break;
    case 'Y':
      $multiply = 365;
      break;
  }

  return $period * $multiply;
}

/**
 * Finds the option value corresponding to a three letter currency
 *
 * @param $ccc
 *   A PayPal three letter currency code (eg: USD)
 * @return
 *   The string representation the currency (eg: U.S. Dollar)
 */
function lm_paypal_ccc2currency($ccc) {
  $info = _lm_paypal_get_currency_info($ccc);
  return $info[1];
}

/**
 * Generates a human readable string from a number and a 3 letter currency code.
 *
 * If we can find a currency symbol (eg: '$') for the given currency code, use
 * that and return a string like "$5.00".  Otherwise, use the currency code to
 * look up a currency name, and return a string like "5.00 U.S. Dollar".
 *
 * @param $n
 *   A numeric amount
 * @param $ccc
 *   A PayPal three letter currency code (eg: USD)
 * @return
 *   The string representation the amount in that currency (eg: $5)
 */
function lm_paypal_nccc2str($n, $ccc) {
  $sym = lm_paypal_ccc2symbol($ccc);
  if ($sym != '' && $sym != '?') {
    return t('!symbol!amount', array('!amount' => $n, '!symbol' => $sym));
  }
  else {
    $cur = lm_paypal_ccc2currency($ccc);
    return t('!amount !currency', array('!amount' => $n, '!currency' => $cur));
  }
  return $str;
}



/**
 * Email a user
 *
 * @param $to_uid
 *   The uid of user to send this email to
 * @param $about_uid
 *   The uid of the user this email is about
 * @param $subject
 *   The subject line of the email (note it will be run thru strtr() and t())
 * @param $message
 *   The body of the email (note it will be run thru strtr() and t())
 * @param $var
 *   An array of name,value pairs that will be added to the builtin arrary
 *   before being expanded using strtr()
 *
 * Will email the $to_uid user an email. The subject and message will first
 * be expanded with all the variables being replaced by values.
 *  In addition to any vars passed in the following are also present
 * %Username = about_uid's username
 * %Login = about_uid's login
 * %Site' = the local site name
 * %Uri' = the local url
 * %Uri_brief' = the local url without leading http://
 * %Mailto = to_uid's email address
 * %Date' = the date-time
 * (In case you are wondering why they all begin with a capital letter this
 *  is to avoid them clashing with db_query's % handling.  There is probably
 *  a better way around this but there was nothing mentioned in the
 *  documentation.)
 */
function lm_paypal_mail_user($to_uid, $about_uid, $subject, $message, $vars) {
  // TODO: use Token module
  _lm_paypal_ini();
  global $_lm_paypal_debug;
  global $base_url;

  if ($_lm_paypal_debug) {
    watchdog(LM_PAYPAL, "lm_paypal_mail_user($to_uid, $about_uid, $subject, $message, $vars)", NULL);
  }

  $to_account = user_load(array('uid' => $to_uid, 'status' => 1));
  $to = $to_account->mail;

  $about_user = user_load(array('uid' => $about_uid, 'status' => 1));

  //TODO: Maybe use the subscription adminstrators email instead?
  $from = variable_get('site_mail', ini_get('sendmail_from'));

  $variables = array(
    '%Username' => $about_user->name,
    '%Login' => $about_user->login,
    '%Site' => variable_get('site_name', 'drupal'),
    '%Uri' => $base_url,
    '%Uri_brief' => substr($base_url, strlen('http://')),
    '%Mailto' => $to,
    '%Date' => format_date(time()),
  );
  $variables = $variables + $vars;

  $body = strtr(t($message), $variables);
  $subject = strtr(t($subject), $variables);

  watchdog(LM_PAYPAL, 'Sending mail to: '. $to, NULL);

  //drupal_mail('lm_paypal', $to, $subject, $body, $from);

  $params['subject'] = $subject;
  $params['body'] = $body;

  drupal_mail('lm_paypal', 'notify', $to, user_preferred_language($to_account), $params);
}

function lm_paypal_mail($key, &$message, $params) {
  // TODO: stuff needs moving here from above function!
  switch ($key) {
    case 'notify':
      // $language = $message['language'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implementation of hook_cron().
 */
function lm_paypal_cron() {
  _lm_paypal_ini();
  global $_lm_paypal_debug;
  global $_lm_paypal_ipns_max_age;

  if ($_lm_paypal_debug) {
    watchdog(LM_PAYPAL, 'cron');
  }

  $max_age = time() - ($_lm_paypal_ipns_max_age * 3600);
  db_query("DELETE FROM {lm_paypal_ipns} WHERE timestamp < %d", $max_age);
}

/**
 * Extract data from the 'custom' field in an IPN.  The old way LM Paypal did it
 * was by bit-packing into a 32-bit integer. The new way is PHP serialized data.
 * @return an associative array with at least 'uid' and 'other'.
 */
function unpack_ipn_custom($ipn) {
  if ($ipn) {
    if (is_int($ipn->custom)) {
      // Old bit-packing format for 'custom'. The uid is in the bottom of 'custom'
      return array('uid' => $ipn->custom & 0xFFFF, 'other' => ($ipn->custom >> 16) & 0xFFFF);
    }
    else {
      // New serialized data
      return unserialize($ipn->custom);
    }
  }
  else {
    // Not set
    return array();
  }
}
