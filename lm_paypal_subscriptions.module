<?php

// CONTEXT MODULE

// BIG TODO: get nicer and module coherent func. names, like lm_paypal_subscriptions_<MY FUNC>

/**
 * @file
 *
 * PayPal Subscriptions interface.
 *
 * This is a Drupal module to handle PayPal subscriptions. It requires the
 * lm_paypal module to be installed, enabled and configured.
 */




/**
 * A normal subscription consists of two IPNs, which may arrive in either order:
 * - a "signup" IPN (txn_type = subscr_signup)
 * - a "payment" IPN (txn_type = subscr_payment)
 *
 */
define('LM_PAYPAL_SUBSCRIPTIONS', 'LM_PayPal_Subs');

// Don't change these here! Use the admin interface at admin/settings/lm_paypal_subscriptions
define('LM_PAYPAL_SUBSCRIPTIONS_INPROGRESS_DEFAULT', '/lm_paypal/subscriptions_inprogress');
define('LM_PAYPAL_SUBSCRIPTIONS_MENU_REBUILD_DEFAULT', FALSE);

define('LM_PAYPAL_SUBSCRIPTIONS_UID_ADMIN_DEFAULT', 1);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONSUB_DEFAULT', 1);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONSUB_SUBJECT', 'New subscriber %Username to %Subscription%Node on %Site');
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONSUB_BODY', 'The user %Username has subscribed to %Subscription%Node on %Site on %Date');

define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONEND_DEFAULT', 1);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONEND_SUBJECT', 'User %Username leaves %Subscription%Node on %Site');
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONEND_BODY', 'The user %Username has ended their subscription to %Subscription%Node on %Site on %Date by %End');

define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONSUB_DEFAULT', 0);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONSUB_SUBJECT_DEFAULT', 'Welcome to %Subscription%Node');
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONSUB_BODY_DEFAULT', 'Hello %Username and welcome to your new subscription %Subscription%Node on %Site');

define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONNEAREND_DEFAULT', 0);
define('LM_PAYPAL_SUBSCRIPTIONS_NEAREND_DAYS_DEFAULT', 5);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONNEAREND_SUBJECT_DEFAULT', 'Your subscription %Subscription ends soon');
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONNEAREND_BODY_DEFAULT', 'Hello %Username your subscription to %Subscription on %Site ends in %Days days.');

define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONEND_DEFAULT', 0);
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONEND_SUBJECT_DEFAULT', 'Goodbye from %Subscription');
define('LM_PAYPAL_SUBSCRIPTIONS_SEND_USER_ONEND_BODY_DEFAULT', 'Hello %Username and thank you for being a subscriber to %Subscription on %Site. We hope you will join us again.');

define('LM_PAYPAL_SUBSCRIPTIONS_TERMS_DEFAULT', '');

// In theory a subscription will go:
// signedup, live, EOT (end of term) or cancelled
// however sometimes (often) a subscr_payment will arrive before a subscr_signup
//  so then you'll get paid, live... instead
// If the incoming subscription details dont match those expected it will
//  be blocked
// If the subscription amount is zero (probably for a trial period) then
//  no payment will arrive
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_DEAD', 0);
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_LIVE', 1); // dont change this one!
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_SIGNEDUP', 2);
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_PAID', 3);
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_CANCELLED', 4);
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_EOT', 5);
define('LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED', 6);

function lm_paypal_subscription_get_inprogress() {
  return variable_get('lm_paypal_subscriptions_inprogress', LM_PAYPAL_SUBSCRIPTIONS_INPROGRESS_DEFAULT);
}

function lm_paypal_subscription_menu_rebuild() {
  return (bool) variable_get('lm_paypal_subscriptions_menu_rebuild', LM_PAYPAL_SUBSCRIPTIONS_MENU_REBUILD_DEFAULT);
}

/**
 * Get textual status.
 *
 * @param int $status = NULL
 *   (optional) If omitted, return full list.
 * @return mixed
 *   Either a string (textual representation of status) or array with all
 *   statuts.
 *   Returns NULL in case status does not exists
 */
function lm_paypal_subscription_get_status($status = NULL) {
  static $cache;
  if (! $cache) {
    $cache = array(
      0 => t('dead'),
      1 => t('live'),
      2 => t('signedup'),
      3 => t('paid'),
      4 => t('cancelled'),
      5 => t('eot'),
      6 => t('blocked'),
    );
  }
  if ($status) {
    return $cache[$status];
  }
  return $cache;
}

/**
 * Implementation of hook_help().
 */
function lm_paypal_subscriptions_help($path, $arg) {
  $groups = l(t('create content > group'), 'node/add/og');
  $subs = l(t('LM PayPal Subscriptions'), 'admin/settings/lm_paypal/subscriptions');

  $admin = l('LM PayPal Admin', 'admin/settings/lm_paypal');
  $roles = l(t('user management > roles'), 'admin/user/roles');
  $access = l(t('user management > permissions'), 'admin/user/permissions');
  $blocks = l(t('site building > blocks'), 'admin/build/block');

  $help_subs = l(t('LM PayPal Subscriptions Help'), 'admin/help/lm_paypal_subscriptions');

  switch ($path) {
    // admin/help/lm_paypal_subscriptions
    case 'admin/help#lm_paypal_subscriptions':
      $output .= '<p><b>'. t('Special Notes') .':</b>';
      $output .= '<ul>';
      $output .= '<li><b>'. t('This module requires the module lm_paypal to be installed, enabled and configured.') .'</b></li>';
      $output .= '<li>'. t('This module does not provide access control. The subscriptions defined here allow paid membership of a role or Organic Group only. Use this module in conjunction with an access control module such as <a href="http://drupal.org/project/taxonomy_access">Taxonomy Access Control</a> or <a href="http://drupal.org/project/premium">Premium</a> to restrict the actions of a role on your site.') .'</li>';
      $output .= '<li>'. t('You must use the subscription buttons generated by this module. The button factory on PayPal cannot add all the information this module needs.') .'</li>';
      $output .= '<li>'. t('Only authenticated users can take out subscriptions.') .'</li>';
      $output .= '</ul>';
      $output .= '</p>';

      $output .= '<h2>'. t('Initial Configuration') .'</h2>';
      $output .= '<p>'. t('If you are new to this module you need to:');
      $output .= '<ul>';
      $output .= '<li>'. t("Update the site specific settings via !admin. Normally you only need to provide your PayPal Business Email.", array("!admin" => $admin)) .'</li>';
      $output .= '<li>'. t("For role subscriptions, if not already created, use !roles to create one or more additional roles to be associated with the subscriptions you are about to create.", array("!roles" => $roles)) .'</li>';
      $output .= '<li>'. t("For Organic Group (OG) subscriptions, if not already created, use !groups to create one or more additional groups.", array("!groups" => $groups)) .'</li>';
      $output .= '<li>'. t('For role subscriptions configure your chosen access control module, for example <a href="http://drupal.org/project/taxonomy_access">Taxonomy Access Control</a> or <a href="http://drupal.org/project/premium">Premium</a>, to restrict roles as appropriate for your setup.') .'</li>';
      $new = l(t('Create New Subscription'), 'admin/settings/lm_paypal/subscriptions/new');
      $output .= '<li> '. t("Use !new to create one or more subscription definitions.", array("!new" => $new)) .'</li>';
      $output .= '<li>'. t("Make sure the right roles (usually just 'authenticated user') can see these subscription definitions by enabling it in !access under <b>lm_paypal_module</b> 'access lm_paypal_subscribe'. ", array("!access" => $access));
      $output .=    t('<em>Special note:</em> If anonymous users are allowed to view the subscriptions pages then they are asked to login or register instead of subscribing. ') .'</li>';
      $output .= '<li>'. t('Once completed the new menu item <b>PayPal Subscribe</b> will become available allowing users to select the subscriptions they wish to purchase. Users can also view their subscriptions under <b>my account</b>.') .'</li>';
      $output .= '</ul>';
      $output .= '</p>';

      $output .= '<h2>'. t('Blocks') .'</h2>';
      $output .= '<p>'. t("For each role or group subscription defined a subscribe block becomes automatically available. These can be configured via !blocks", array("!blocks" => $blocks)) .'</p>';
      $output .= '<p><b>'. t('Special note:') .'</b> '. t('subscription blocks are only displayed to logged in users who do not already have that subscription.') .'</p>';

      $output .= '<h2>'. t('Inline PHP Snippet') .'</h2>';
      $output .= '<p>'. t("The following PHP snippet shows how to make a subscribe button appear for the subscription with a subid of 1. Admin's can find the subid via !subs", array("!subs" => $subs)) .'</p>';
      $output .= '<p>'. t('Note that nothing will appear if they are either not able to subscribe (not logged in) or if they have already subscribed:') .'</p>';
      $output .= '<pre>'. t('&lt;?php
if (function_exists(\'lm_paypal_can_subscribe\')) {
  $subid = 1;
  if (lm_paypal_can_subscribe ($subid)) {
    print \'Why not subscribe now? \' . lm_paypal_subscribe($subid,8);
  }
}
?&gt;') .'</pre>';
      $output .= '<p>'. t('It is best to check that the lm_paypal_can_subscribe function exists before using it just in case the module has been disabled.') .'</p>';

      $output .= '<h2>'. t('Viewing Subscriptions/Subscribers') .'</h2>';
      $output .= '<p>'. t("To view all subscriptions and everyone who has subscribed to them use !subs", array("!subs" => $subs)) .'</p>';

      return $output;

    // This is the brief description of the module displayed on the modules page
    case 'admin/modules#description':
      return t('Provides PayPal subscriptions to Drupal roles (requires lm_paypal).');

    // This appears at the start of the module admin page
    case 'admin/settings/lm_paypal_subscriptions':
    // The admin page under Drupal 5
    case 'admin/settings/lm_paypal/subscriptions_settings':
    // This appears at the start of the admin page
    case 'admin/settings/lm_paypal/subscriptions':
    // This appears at the start of the new subscription page
    case 'admin/settings/lm_paypal/subscriptions/new':
      $output .= '<p>'. t("For detailed help please read !help_subs", array("!help_subs" => $help_subs)) .'</p>';
      return $output;

    // This appears at the start of the subscriptions user page
    case 'lm_paypal/subscribe':
      $output .= '<p>'. t('The following lists all the subcriptions available via PayPal on this system. To take out one of these subscriptions you will need a login on this web site and a PayPal account. If you do not already have a PayPal account then PayPal will show you how to get an account when you subscribe.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function lm_paypal_subscriptions_perm() {
  return array('access lm_paypal_subscribe');
}

/**
 * Implementation of hook_perm().
 */
function lm_paypal_subscriptions_theme() {
  $items = array();
  $items['lm_paypal_subscription_name'] = array(
    'arguments' => array('subscription' => NULL),
    'file' => 'lm_paypal_subscriptions.theme',
  );
  return $items;
}

/**
 * Implementation of hook_menu().
 */
function lm_paypal_subscriptions_menu() {
  $items = array();

  // Main tab
  $items['admin/settings/lm_paypal/subscriptions'] = array(
    'title' => 'Subscriptions',
    'page callback' => 'lm_paypal_subscriptions_view_all_page',
    'access arguments' => array('administer lm_paypal'),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 33,
  );
  // Tab 2.1: Subscription Settings
  $items['admin/settings/lm_paypal/subscriptions/view'] = array(
    'title' => 'View subscriptions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  // Tab 2.2 Subscription admin
  $items['admin/settings/lm_paypal/subscriptions/settings'] = array(
    'title' => 'Settings',
    'description' => 'View PayPal subscriptions.',
    'access arguments' => array('administer lm_paypal'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscriptions_admin_settings'),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Add and delete a subscription
  $items['admin/settings/lm_paypal/subscriptions/add'] = array(
    'title' => 'Create subscription',
    'description' => 'Create new PayPal subscription.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscriptions_edit_form'),
    'access arguments' => array('administer lm_paypal', NULL),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/lm_paypal/subscriptions/%/delete'] = array(
    'title' => 'Delete subscription',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscription_delete_confirm_form', 4),
    'access callback' => 'lm_paypal_subscription_access',
    'access arguments' => array('subscription', 4),
    'file' => 'lm_paypal_subscriptions.admin.inc',
  );

  // View and edit tabs
  $items['admin/settings/lm_paypal/subscriptions/%'] = array(
    'title' => 'View subscription details',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'lm_paypal_subscriptions_details',
    'page arguments' => array(4),
    'access callback' => 'lm_paypal_subscription_access',
    'access arguments' => array('subscription', 4),
    'file' => 'lm_paypal_subscriptions.pages.inc',
  );
  $items['admin/settings/lm_paypal/subscriptions/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/lm_paypal/subscriptions/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscriptions_edit_form', 4),
    'access callback' => 'lm_paypal_subscription_access',
    'access arguments' => array('subscription', 4),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'weight' => 2,
  );
  // View subscribers for one subscription
  $items['admin/settings/lm_paypal/subscriptions/%/subscribers'] = array(
    'title' => 'Subscribers',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'lm_paypal_subscriptions_subscribers_view_page',
    'page arguments' => array(4),
    'access callback' => 'lm_paypal_subscription_access',
    'access arguments' => array('subscription', 4),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'weight' => 3,
  );

  // View all suscribers
  $items['admin/settings/lm_paypal/subscribers'] = array(
    'title' => 'Subscribers',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'lm_paypal_subscriptions_subscribers_view_page',
    'access arguments' => array('administer lm_paypal'),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'weight' => 32,
  );
  // View and edit a subscriber
  $items['admin/settings/lm_paypal/subscribers/subscriber/%'] = array(
    'title' => 'Subscriber',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscriptions_subscriber_edit_form', 5),
    'access callback' => 'lm_paypal_subscription_access',
    'access arguments' => array('subscriber', 5),
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/lm_paypal/subscribers/subscriber/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  // TODO
  $items['admin/settings/lm_paypal/subscribers/%/pay'] = array(
    'title' => 'Pay',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lm_paypal_subscriber_pay_form', 4),
    'access arguments' => array('administer lm_paypal'),
    'description' => 'Mark a node as paid bypassing Paypal.',
    'file' => 'lm_paypal_subscriptions.admin.inc',
    'weight' => 20,
  );

  // User page to subscribe
  $items['lm_paypal/subscribe'] = array(
    'title' => 'PayPal Subscribe',
    'page callback' => 'lm_paypal_subscribe',
    'access arguments' => array('access lm_paypal_subscribe'),
    'description' => 'Subscribe using PayPal.',
    'type' => MENU_CALLBACK,
    'file' => 'lm_paypal_subscriptions.pages.inc',
  );

  // By default we tell Paypal to redirect users here after subscribing
  $items['lm_paypal/subscriptions_inprogress'] = array(
    'title' => 'Subscription In Progress',
    'type' => MENU_CALLBACK,
    'page callback' => 'lm_paypal_subscriptions_inprogress',
    'access arguments' => array('access lm_paypal_subscribe'),
  );

  return $items;
}

/*
 * For security, we have to make a subscription_access and a subscriber_access
 * that checks our subscription/subscriber exists before we let the user access
 * to the page.
 */
function lm_paypal_subscription_access($op, $subid) {
  if (user_access('administer lm_paypal')) {
    switch ($op) {
      case 'subscription':
        return lm_paypal_subscriptions_load_subscription($subid) != NULL;

      case 'subscriber':
        return lm_paypal_subscriptions_load_subscriber($subid) != NULL;
    }
  }
  return FALSE;
}

/**
 * Load a subscription from database.
 * 
 * This method keeps a static cache.
 * 
 * @param int $subid
 *   Subscription id to load
 * @param int $status = NULL
 *   Specify a status to refine query
 * @return object
 *   Object from database or NULL if not found
 */
function lm_paypal_subscriptions_load_subscription($subid) {
  static $cache = array();
  if (! isset($cache[$subid])) {
    $result = db_query("SELECT * FROM {lm_paypal_subscriptions} WHERE subid = %d", $subid);
    if ($subscription = db_fetch_object($result)) {
      $cache[$subid] = $subscription;
    }
  }
  return $cache[$subid];
}

/**
 * Load a subscriber from database
 *
 * @param int $subid
 *   Subscriber id to load
 * @return object
 *   Object from database or NULL if not found
 */
function lm_paypal_subscriptions_load_subscriber($subid) {
  static $cache = array();
  if (! isset($cache[$subid])) {
    $result = db_query("SELECT * FROM {lm_paypal_subscribers} WHERE subid = %d", $subid);
    if ($subscriber = db_fetch_object($result)) {
      $cache[$subid] = $subscriber;
    }
  }
  return $cache[$subid];
}

/**
 * Find all live node subscriptions.
 *
 * @return array
 *   Keyed array of node subscription item_name field.
 *   Keys are subid.
 */
function lm_paypal_subscription_node_subs() {
  static $cache;
  if (! $cache) {
    $result = db_query('SELECT subid, item_name FROM {lm_paypal_subscriptions} WHERE status = 1 AND kind = 1');
    while ($data = db_fetch_object($result)) {
      $cache[$data->subid] = $data->item_name;
    }
  }
  return $cache;
}

/**
 * Tests if the given node has a live subscription.
 *
 * @param mixed $node
 *   Either the node to check, or the nid (usefull for hook_load).
 * @param int &$subid
 *   The corresponding subscription identifier will be written in this param,
 *   ONLY if the subscriber was subscribed.
 * @return int
 *   Subscription id used for payement, if node has been paid. Else FALSE
 */
function lm_paypal_node_subscribed($node) {
  static $cache = array();

  if (is_object($node)) {
    $nid = $node->nid;
  }
  else {
    $nid = $node;
  }

  if (! $cache[$nid]) {
    $result = db_query("SELECT subid FROM {lm_paypal_subscribers} WHERE status = 1 AND nid = %d", $nid);
    if ($data = db_fetch_object($result)) {
      $subid = $data->subid;
    }
    $cache[$nid] = $subid;
  }

  return isset($cache[$nid]) ? $cache[$nid] : FALSE;
}

//////////////////// BELOW THIS LINE, CODE NEED SERIOUS REVIEW








/**
 * Finds if a user is already subscribed to this subid
 *
 * @param int $subid
 *   The subscription to check
 * @param object $account = NULL
 *   (optional) The user to check, if null then the current user will be checked
 * @return
 *   TRUE only for role subscriptions and if the current user is subscribed
 */
function lm_paypal_user_subscribed($subid, $account = NULL) {
  $subid = (int) $subid;

  if (! $account) {
    global $user;
    $account = $user;
  }

  // kind 0 is a role subscription, kind 2 is a group
  $number = db_result(db_query("SELECT COUNT(*) FROM {lm_paypal_subscribers} WHERE uid = %d AND subid = %d AND status = 1 AND (kind = 0 OR kind = 2)", $account->uid, $subid));
  return $number == 1;
}

/**
 * Tests if the current user, if any, can subscribe to a given subscription.
 *
 * @param $subid
 *   The subscription the user is trying to subscribe to.
 *
 * @return
 *   TRUE only if there is a user and they have not already subscribed
 */
function lm_paypal_can_subscribe($subid) {
  global $user;
  if ($user->uid == 0 ) {
    return FALSE;
  }
  return ! lm_paypal_user_subscribed($subid);
}

/**
 * Returns all the Organic groups available to subscriptions
 *
 * @return
 *  a groups array of all open groups
 */
function lm_paypal_subscribable_groups() {
  if (!function_exists('og_subscribe_user')) {
    return array();
  }

  // This SQL borrowed from: function og_list_groups_page and added to the WHERE
  // a condition to match og.selective = OG_INVITE_ONLY (2)
  $sql = db_rewrite_sql("SELECT og.nid, n.title, r.body, n.uid, u.name, og.og_description FROM {og} og INNER JOIN {node} n ON og.nid = n.nid INNER JOIN {node_revisions} r ON r.vid = n.vid INNER JOIN {users} u ON n.uid = u.uid WHERE og.og_directory=1 AND n.status=1 AND og.og_selective = 2 ORDER BY og.nid DESC", 'og', 'nid');
  $gs = db_query($sql);

  $groups = array();
  while ($g = db_fetch_object($gs)) {
    $groups[$g->nid] = $g->title;
  }

  if (count($groups) == 0) {
    return array(t('No groups currently defined'));
  }

  return $groups;
}

/**
 * Returns all the roles available to subscriptions
 *
 * @param boolean $none = FALSE
 *   (optional) Set this to TRUE and first élement will be a textual 'None'
 *   with NULL value.
 * @return
 *  a roles array with all the drupal standard roles removed
 */
function lm_paypal_subscribable_roles($none = FALSE) {
  $roles = user_roles(TRUE);
  $ret = array();
  foreach ($roles as $rid => $name) {
    if ($rid == DRUPAL_ANONYMOUS_RID || $rid == DRUPAL_AUTHENTICATED_RID) {
      continue;
    }
    $ret[$rid] = $name;
  }
  if ($none) {
    return array(NULL => t('None')) + $ret;
  }
  return $ret;
}

/**
 * Find the duration of a subscription.
 *
 * @param $so
 *   A subscription object
 * @return
 *   0 if recurrs till cancelled, otherwise the number of days duration
 */
function lm_paypal_subscription_days($so) {
  if ($so->src && $so->srt == '') {
    return 0;
  }
  $multiply = 1;
  if ($so->src && $so->srt > 1) {
    $multiply = $so->srt;
  }
  return
    (lm_paypal_period_unit2days($so->p1, $so->t1)
      + lm_paypal_period_unit2days($so->p2, $so->t2)
      + (lm_paypal_period_unit2days($so->p3, $so->t3) * $multiply));
}

function _lm_paypal_subscriptions_ipn_is_valid($ipn) {
  $so = lm_paypal_subscriptions_load_subscription($ipn->item_number);
  $custom = lm_paypal_unpack_ipn_custom($ipn);
  return $so != NULL && $custom['module'] == LM_PAYPAL_SUBSCRIPTIONS;
}

/**
 * Check and get if no error mainly used vars from an incomming new IPN.
 *
 * @param object $ipn
 *   Incomming IPN
 * @return array
 *   Array(<subscription_object>, <uid>, <nid or NULL>)
 *   FALSE if IPN is not for us or has wrong data
 */
function _lm_paypal_subscriptions_ipn_get_vars($ipn) {
  $link = l(t('view'), "admin/settings/lm_paypal/id/$ipn->id");

  $var_so = NULL;
  $var_uid = NULL;
  $var_nid = NULL;

  if ($ipn->payment_status == 'Pending') {
    $message = 'Ignoring IPN with status: Pending. Check your PayPal account to see why it is pending. Note: pending_reason: %reason';
    $message_vars = array('%reason' => check_plain($ipn->pending_reason));
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, $message, $message_vars, WATCHDOG_ERROR, $link);
    return FALSE;
  }

  $custom = lm_paypal_unpack_ipn_custom($ipn);

  // Check for item_number and client id
  if ($ipn->item_number == '' || !is_numeric($ipn->item_number)) {
    $message = 'Subscription ipn invalid item_number';
    $message_vars = array('%item_number' => check_plain($ipn->item_number));
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, $message, $message_vars, WATCHDOG_ERROR, $link);
    return FALSE;
  }
  if (!isset($custom['uid']) || !is_numeric($custom['uid'])) {
    $message = 'Subscription custom (custom %custom)';
    $message_vars = array('%custom' => check_plain($ipn->custom));
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, $message, $message_vars, WATCHDOG_ERROR, $link);
    return FALSE;
  }

  $var_so = lm_paypal_subscriptions_load_subscription($ipn->item_number);
  if (! $var_so->status) {
    $var_so = NULL;
  }

  $var_uid = $custom['uid'];
  // This is usually true and doesn't hurt otherwise
  $var_nid = $custom['nid'];

  // Look up the subscription
  if (! $var_so || ! $var_so->status) {
    $message = 'IPN uses unknown or defunct subscription, ignored: %subid';
    $message_vars = array('%subid' => $var_so->subid);
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, $message, $message_vars, WATCHDOG_ERROR, $link);
    return FALSE;
  }

  // Is this uid valid?
  if (! user_load(array('uid' => $var_uid))) {
    $message = 'IPN subscribing unknown uid, ignored: %uid';
    $message_vars = array('%uid' => $uid);
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, $message, $message_vars, WATCHDOG_ERROR, $link);
    return FALSE;
  }

  return array($var_so, $var_uid, $var_nid);
}

/**
 * Implementation of hook_lm_paypal_process_in_<txn_type>().
 */
function lm_paypal_subscriptions_lm_paypal_ipn_subscr_eot($ipn) {
  return _lm_paypal_subscriptions_ipn_cancel_or_eot($ipn);
}

/**
 * Implementation of hook_lm_paypal_process_in_<txn_type>().
 */
function lm_paypal_subscriptions_lm_paypal_ipn_subscr_cancel($ipn) {
  return _lm_paypal_subscriptions_ipn_cancel_or_eot($ipn);
}

function lm_paypal_subscriptions_lm_paypal_ipn_subscr_signup($ipn) {
  if (! _lm_paypal_subscriptions_ipn_is_valid($ipn)) {
    return FALSE;
  }

  list($so, $uid, $nid) = _lm_paypal_subscriptions_ipn_get_vars($ipn);

  // Note: a signup doesn't have a transaction id!

  if (!_lm_paypal_subscriptions_validate($ipn, $so, $link)) {
    return FALSE;
  }

  // Is this an existing subscription (sometimes payments come before
  // signups so this is possible).
  $subs = db_query("SELECT * FROM {lm_paypal_subscribers} WHERE subscr_id = '%s'", $ipn->subscr_id);
  $ss = db_fetch_object($subs);

  if (!$ss) {
    // Try and track problem maybe caused by multiple subscr_signups
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'new subscr_signup subscr_id %sid', array('%sid' => $ipn->subscr_id));
    // Not already present.
    // Create an entry in the subscribers table.
    lm_paypal_add_subscriber($so->kind, $uid, $nid, $so->subid, $ipn->subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_SIGNEDUP);
  }
  else {
    // Try and track problem maybe caused by multiple subscr_signups
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'repeat subscr_signup subscr_id %sid', array('%sid' => $ipn->subscr_id));
    // It is already present

    switch ($ss->status) {
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to signup to blocked subscription, ignored', NULL, WATCHDOG_ERROR, $link);
        return;

      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_DEAD:
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_CANCELLED:
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_EOT:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to signup to ended subscription, ignored %status', array('%status' => $ss->status), WATCHDOG_ERROR, $link);
        return;

      // Some users are reporting symptoms that suggest multiple
      // subscr_signup's are arriving. Ignore the duplicates here.
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_LIVE:
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_SIGNEDUP:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Signup received but subscription live or signedup, ignoring', NULL, WATCHDOG_ERROR, $link);
        return;

      // A payment arrived first. Now obey the signup
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_PAID:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, t('Signup received after payment, obeying it anyway'));
        break;
    }
  }

  // A signup alone is enough to go live. A payment IPN may not arrive at all
  // if the subscription amount is zero (usually a trial period)
  lm_paypal_subscriber_set_status($ipn->subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_LIVE);

  if ($so->kind == 0) {
    lm_paypal_user_gain_role($uid, $so->rid);
  }
  else if ($so->kind == 2) {
    lm_paypal_user_gain_group($uid, $so->rid);
  }

  if ($so->send_admin_onsub && is_numeric($so->uid_admin)) {
    // Email admin to let them know of a new subscriber
    //  note: t() will be called inside lm_paypal_mail_user
    // Extra variables (in addition to the default ones provided)
    if ($so->kind == 0 || $so->kind == 2) {
      $variables = array('%Subscription' => $so->item_name, '%Node' => '');
    }
    else if ($so->kind == 1) {
      $node = t(" on node !nid", array("!nid" => $nid));
      $variables = array('%Subscription' => $so->item_name, '%Node' => $node);
    }
    lm_paypal_mail_user(
      $so->uid_admin,
      $uid,
      LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONSUB_SUBJECT,
      LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONSUB_BODY,
      $variables);
  }

  if ($so->send_user_onsub) {
    // Email user to confirm a new subscriber
    //  note: t() will be called inside lm_paypal_mail_user
    // Extra variables (in addition to the default ones provided)
    if ($so->kind == 0 || $so->kind == 2) {
      $variables = array('%Subscription' => $so->item_name, '%Node' => '');
    }
    else if ($so->kind == 1) {
      $variables = array('%Subscription' => $so->item_name, '%Node' => $node);
    }
    lm_paypal_mail_user($uid, $uid, $so->send_user_onsub_subject, $so->send_user_onsub_body, $variables);
  }

  // Notify lm_paypal module we processed it.
  return TRUE;
}

/**
 * Implementation of hook_lm_paypal_process_in_<txn_type>().
 */
function lm_paypal_subscriptions_lm_paypal_ipn_subscr_payment($ipn) {
  if (! _lm_paypal_subscriptions_ipn_is_valid($ipn)) {
    return FALSE;
  }

  if ($ipn->payment_status != 'Completed') {
    return FALSE;
  }

  list($so, $uid, $nid) = _lm_paypal_subscriptions_ipn_get_vars($ipn);

  if (lm_paypal_already_processed($ipn->txn_id)) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      'This transaction has already been processed, ignored: %id',
      array('%id' => check_plain($ipn->txn_id)),
      WATCHDOG_WARNING,
      $link);
    return FALSE;
  }

  // This should be an existing subscription (but sometimes payments come
  // before signups).
  $ss = lm_paypal_subscriptions_load_subscriber($ipn->subscr_id);

  if (! $ss) {
    // Not already present.
    // Create an entry in the subscribers table.
    lm_paypal_add_subscriber($so->kind, $uid, $nid, $so->subid, $ipn->subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_PAID);
  }
  else {
    // It is already present
    switch ($ss->status) {
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to pay to blocked subscription, ignored', NULL, WATCHDOG_ERROR, $link);
        break;

      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_DEAD:
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_CANCELLED:
      case LM_PAYPAL_SUBSCRIPTIONS_STATUS_EOT:
        watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to pay ended subscription, ignored %status', array('%status' => $ss->status), WATCHDOG_ERROR, $link);
        break;
    }
  }

  // Notify lm_paypal module we processed it.
  return TRUE;
}

/**
 * Implementation of hook_lm_paypal_process_in_<txn_type>().
 */
function _lm_paypal_subscriptions_ipn_cancel_or_eot($ipn) {
  if (! _lm_paypal_subscriptions_ipn_is_valid($ipn)) {
    return FALSE;
  }

  list($so, $uid, $nid) = _lm_paypal_subscriptions_ipn_get_vars($ipn);

  // Note: Cancel's dont get a transaction id!
  $end = check_plain(substr($ipn->txn_type, 7));
  if (lm_paypal_debug()) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'User ending subscription (uid %uid, subid %subid, type %type)', array('%uid' => $uid, '%subid' => $subid, '%end' => $end));
  }

  // Check I know this subscr_id
  $subs = db_query("SELECT * FROM {lm_paypal_subscribers} WHERE subscr_id = '%s'", $ipn->subscr_id);
  $ss = db_fetch_object($subs);
  if (!$ss) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Unable to fetch the subscriber object', NULL, WATCHDOG_ERROR, $link);
    return;
  }

  switch ($ss->status) {
    case LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED:
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to end to blocked subscription, ignored', NULL, WATCHDOG_ERROR, $link);
      return;

    case LM_PAYPAL_SUBSCRIPTIONS_STATUS_DEAD:
    case LM_PAYPAL_SUBSCRIPTIONS_STATUS_CANCELLED:
    case LM_PAYPAL_SUBSCRIPTIONS_STATUS_EOT:
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Attempt to end ended subscription, ignored %status', array('%status' => $ss->status), WATCHDOG_ERROR, $link);
      return;
  }

  // Mark the subscription ended
  $status = ($end == 'eot' ? LM_PAYPAL_SUBSCRIPTIONS_STATUS_EOT : LM_PAYPAL_SUBSCRIPTIONS_STATUS_CANCEL);
  lm_paypal_subscriber_set_status($ipn->subscr_id, $status);

  if ($so->kind == 0) {
    lm_paypal_user_loose_role($uid, $so->rid);
  }
  else if ($so->kind == 2) {
    lm_paypal_user_loose_group($uid, $so->rid);
  }

  if ($so->send_admin_onend && is_numeric($so->uid_admin)) {
    // Email admin to let them know of an eot or cancellation
    //  note: t() will be called inside lm_paypal_mail_user
    // Extra variables (in addition to the default ones provided)
    if ($so->kind == 0 || $so->kind == 2) {
      $variables = array('%Subscription' => $so->item_name, '%End' => $end, '%Node' => '');
    }
    else if ($so->kind == 1) {
      $node = t(" on node !nid", array("!nid" => $nid));
      $variables = array('%Subscription' => $so->item_name, '%End' => $end, '%Node' => $node);
    }
    lm_paypal_mail_user(
      $so->uid_admin,
      $uid,
      LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONEND_SUBJECT,
      LM_PAYPAL_SUBSCRIPTIONS_SEND_ADMIN_ONEND_BODY,
      $variables);
  }

  if ($so->send_user_onend) {
    // Email user to confirm an eot or cancellation
    //  note: t() will be called inside lm_paypal_mail_user
    // Extra variables (in addition to the default ones provided)
    if ($so->kind == 0 || $so->kind == 2) {
      $variables = array('%Subscription' => $so->item_name, '%End' => $end, '%Node' => '');
    }
    else if ($so->kind == 1) {
      $variables = array('%Subscription' => $so->item_name, '%End' => $end, '%Node' => $node);
    }
    lm_paypal_mail_user($uid, $uid, $so->send_user_onend_subject, $so->send_user_onend_body, $variables);
  }

  // Notify lm_paypal module we processed it.
  return TRUE;
}



/**
 * Check that the incoming subscription details match those of the subscription.
 *
 * @param $ipn
 *   A message to prepend to error output
 * @param $so
 *   subsciption object
 * @param $link
 *   A link to this IPN for display in watchdogs
 * @return
 *   TRUE if a successful match, FALSE otherwise
 */
function _lm_paypal_subscriptions_validate($ipn, $so, $link) {

  // note: amount, period, type (a,p,t)
  // 1 = trial period 1
  // 2 = trial period 2
  // 3 = regular (so a3,p3,t3 = regular subscription)

  // annoyinging the incoming period is a combination of period and units

  if (!_lm_paypal_subscriptions_validate_ap(
    t('Main'),
    $link,
    $ipn->subscr_id,
    $ipn->mc_amount3, $so->a3,
    $ipn->mc_currency, $so->currency_code,
    $ipn->period3, $so->p3, $so->t3)) {
    return FALSE;
  }

  if (!_lm_paypal_subscriptions_validate_ap(
    t('Trial Period 1'),
    $link,
    $ipn->subscr_id,
    $ipn->mc_amount1, $so->a1,
    $ipn->mc_currency, $so->currency_code,
    $ipn->period1, $so->p1, $so->t1)) {
    return FALSE;
  }

  if (!_lm_paypal_subscriptions_validate_ap(
    t('Trial Period 2'),
    $link,
    $ipn->subscr_id,
    $ipn->mc_amount2, $so->a2,
    $ipn->mc_currency, $so->currency_code,
    $ipn->period2, $so->p2, $so->t2)) {
    return FALSE;
  }

  if ($so->src == '') {
    $so->src = 0;
  }

  if ($ipn->recurring != $so->src) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      'Recurrence mismatch (supplied %supplied, expected %expected), blocking subscription',
      array('%supplied' => check_plain($ipn->recurring), '%expected' => check_plain($so->src)),
      WATCHDOG_ERROR,
      $link);
    lm_paypal_subscriber_set_status($ipn->subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED);
    return FALSE;
  }

  if ($ipn->recur_times != $so->srt) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      'Recur times mismatch (supplied %supplied, expected %expected), blocking subscription',
      array('%supplied' => check_plain($ipn->recur_times), '%expected' => check_plain($so->srt)),
      WATCHDOG_ERROR,
      $link);
    lm_paypal_subscriber_set_status($ipn->subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED);
    return FALSE;
  }

  return TRUE;
}

/**
 * Check that the incoming subscription amount+period details match those
 *  of the subscription.
 *
 * @param $msg
 *   A message to prepend to error output
 * @param $link
 *   A link to this IPN for display in watchdogs
 * @param $subscr_id
 *   Subscribers id
 * @param $ipn_amount
 *   The incoming amount
 * @param $amount
 *   The subscription amount
 * @param $ipn_currency
 *   The incoming currency
 * @param $cc
 *   The subscription currecy
 * @param $ipn_period
 *   The incoming period+timeunit
 * @param $period
 *   The subscription period+timeunit
 * @return
 *   TRUE if a successful match, FALSE otherwise
 */
function _lm_paypal_subscriptions_validate_ap($msg, $link, $subscr_id, $ipn_amount, $amount, $ipn_currency, $cc, $ipn_period, $period, $units) {
  $ipn_amount = trim($ipn_amount);
  $ipn_currency = trim($ipn_currency);
  $amount = trim($amount);
  $cc = trim($cc);

  if ($ipn_amount == '0.00') {
    $ipn_amount = 0;
  }
  if ($amount == '0.00') {
    $amount = 0;
  }

  if ($ipn_amount != $amount || $ipn_currency != $cc) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      $msg .' payment mismatch (supplied %supplied, expected %expected), blocking subscription:',
      array('%supplied' => check_plain("$ipn_amount $ipn_currency"), '%expected' => check_plain("$amount $cc")),
      WATCHDOG_ERROR,
      $link);
    lm_paypal_subscriber_set_status($subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED);
    return FALSE;
  }

  // If the amount is zero then ignore the period (this only applies to
  // trials because the regular period cannot have a zero amount)
  if ($ipn_amount == 0 || $ipn_amount == '') {
    return TRUE;
  }

  $ipn_period = trim($ipn_period);
  $period = trim($period);
  $units = trim($units);

  if ($period == '' || $period == 0) {
    $pu = '';
  }
  else {
    $pu = "$period $units";
  }

  if ($ipn_period != $pu) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      $msg .' period mismatch (supplied %supplied, expected %expected), blocking subscription',
      array('%supplied' => check_plain($ipn_period), '%expected' => $pu),
      WATCHDOG_ERROR,
      $link);
    lm_paypal_subscriber_set_status($subscr_id, LM_PAYPAL_SUBSCRIPTIONS_STATUS_BLOCKED);
    return FALSE;
  }

  return TRUE;
}

/**
 * Update a subscribers status
 *
 * @param $subscr_id
 *   The PayPal subscr_id to have its table entry updated
 * @param $status
 *   The new status value
 */
function lm_paypal_subscriber_set_status($subscr_id, $status) {
  // Already in subscribers: update
  $sql = 'UPDATE {lm_paypal_subscribers} SET ';
  if ($status == LM_PAYPAL_SUBSCRIPTIONS_STATUS_LIVE) {
    $sql .= 'started = '. time() .',';
  }
  $sql .= "status = %d";
  $sql .= " WHERE subscr_id = '%s'";
  $update = db_query($sql, $status, $subscr_id);
  if (!$update) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, t('Failed to update to subscribers status'), NULL, WATCHDOG_ERROR);
    return;
  }
}

/**
 * Add a subscriber to local tables.
 *
 * @param $kind
 *   The kind of subscription
 * @param $uid
 *   The local users uid
 * @param $nid
 *   The local users nid
 * @param subid
 *   The subscription id
 * @param $subscr_id
 *   The PayPal subscr_id to be saved
 * @param $status
 *   The status value
 */
function lm_paypal_add_subscriber($kind, $uid, $nid, $subid, $subscr_id, $status) {
  $object = array();
  $update = array();

  // Update last-modified status.
  if ($status == LM_PAYPAL_SUBSCRIPTIONS_STATUS_LIVE || $status == LM_PAYPAL_SUBSCRIPTIONS_STATUS_PAID) {
    $object['started'] = time();
  }

  // Add them to subscribers or update their existing record
  $result = db_query("SELECT COUNT(*) FROM {lm_paypal_subscribers} WHERE subscr_id = '%s'", $subscr_id);
  if (db_result($result)) {
    // Update
    $object['status'] = $status;
    $update['subscr_id'] = $subscr_id;
    // error_log("UPDATE lm_paypal_add_subscriber($kind, $uid, $nid, $subid, $subscr_id, $status)");
  }
  else {
    // Insert
    $object['kind'] = $kind;
    $object['uid'] = $uid;
    $object['nid'] = $nid;
    $object['subid'] = $subid;
    $object['subscr_id'] = $subscr_id;
    $object['status'] = $status;
    // error_log("INSERT lm_paypal_add_subscriber($kind, $uid, $nid, $subid, $subscr_id, $status)");
  }

  // Write the record and check the result.
  $wr = drupal_write_record('lm_paypal_subscribers', $object, $update);
  if ($wr === FALSE) {
    watchdog(
      LM_PAYPAL_SUBSCRIPTIONS,
      'Failed to insert/update subscriber: %subscr_id',
      array('%subscr_id' => $subscr_id),
      WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Implementation of hook_user().
 */
function lm_paypal_subscriptions_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  // TODO: On deleting a user issue a cancel on any subscriptions
  // obviously not on PayPal (can't!) just on here.

  // In the "my account" view area show any role subscriptions
  // but only for admin looking at other users or the user themself

  if ($op == 'view' && (user_access('administer lm_paypal') || $user->uid == $account->uid)) {
    $account->content['subscriptions'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Subscriptions'),
      '#weight' => 7, // under History which is 5 and Paid Adverts which is 6.
    );
    // TODO: fix this ugly require
    require_once(drupal_get_path('module', 'lm_paypal_subscriptions').'/lm_paypal_subscriptions.pages.inc');
    $account->content['subscriptions']['subs'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Current subscription status:'),
      '#value' => lm_paypal_subscribe_select(32, $account),
    );
  }
}

/**
 * Implementation of hook_block().
 */
function lm_paypal_subscriptions_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  if ($op == 'list') {
    // Output a list of all the live subscriptions (Role or Group)
    $blocks = array();
    $subs = db_query("SELECT subid, item_name, status FROM {lm_paypal_subscriptions} WHERE status = 1 AND (kind = 0 OR kind = 2)");
    while ($so = db_fetch_object($subs)) {
      $blocks[$so->subid]['info'] = t('PayPal Subscription: %name', array('%name' => $so->item_name));
    }
    return $blocks;
  }
  else if ($op == 'view') {
    $subid = $delta;

    // Subscriptions are only available to users of the site
    if ($user->uid == 0) {
      return;
    }

    if ($_lm_paypal_debug) {
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'block view: %subid', array('%subid' => $subid));
    }

    // Dont show a subscription box if they are already subscribed
    $already = lm_paypal_user_subscribed($subid);
    if ($already) {
      return;
    }

    $subs = db_query("SELECT * FROM {lm_paypal_subscriptions} WHERE status = 1 AND (kind = 0 OR kind = 2) AND subid = %d", $subid);
    $so = db_fetch_object($subs);
    $block['subject'] = t('PayPal Subscription:%name', array('%name' => check_plain($so->item_name)));
    require_once(drupal_get_path('module', 'lm_paypal_subscriptions').'/lm_paypal_subscriptions.pages.inc');
    // TODO: Fix this ugly require
    $output .= lm_paypal_subscribe_subscription($subid, 2+8);
    $block['content'] = $output;
    return $block;
  }
}

/**
 * Returns the default page that users are sent to by PayPal after subscribing.
 *
 * @return
 *   A string containing the page contents.
 */
function lm_paypal_subscriptions_inprogress() {
  return t('<h2>Thank you!</h2><p>Your subscription is in progress but for it to take effect you will have to logout and login again.</p><p>Then you can check your subscriptions by looking in "my account".</p><p><b>Special Note: </b>Although PayPal subscriptions are usually instantaneous sometimes, during really busy periods, it may take a few hours to take effect.</p>');
}

/**
 * Give the user the extra role if they dont already have it
 *
 * @param $uid
 *   uid of the user to gain the role
 * @param $rid
 *   rid for the user to gain
 */
function lm_paypal_user_gain_role($uid, $rid) {
  $roles = db_query("SELECT * FROM {users_roles} WHERE uid = %d AND rid = %d", $uid, $rid);
  if (!db_result($roles)) {
    $insert = db_query("INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)", $uid, $rid);
    if (!$insert) {
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Failed to add user to role (uid %uid, rid %rid)', array('%uid' => $uid, '%rid' => $rid), WATCHDOG_ERROR);
      return;
    }
    if ($_lm_paypal_debug) {
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Added user to role (uid %uid, rid %rid)', array('%uid' => $uid, '%rid' => $rid));
    }

    if (lm_paypal_subscription_menu_rebuild()) {
      menu_rebuild();
    }
  }
}

/**
 * Drop the role from the user - ONLY if they have no other live
 * subscriptions that also give them this role.
 *
 * @param $uid
 *   uid of the user to loose the role
 * @param $rid
 *   rid for the user to loose
 */
function lm_paypal_user_loose_role($uid, $rid) {
  $also = db_query("SELECT * FROM {lm_paypal_subscriptions} d INNER JOIN {lm_paypal_subscribers} s ON d.subid = s.subid WHERE uid = %d AND rid = %d AND s.status = 1 AND d.kind = 0", $uid, $rid);
  if (db_result($also)) {
    if ($_lm_paypal_debug) {
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'User keeps role because of other subscriptions (uid %uid, rid %rid)', array('%uid' => $uid, '%rid' => $rid));
    }
    return;
  }

  db_query("DELETE FROM {users_roles} WHERE uid = %d AND rid = %d", $uid, $rid);

  if ($_lm_paypal_debug) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Drop user from role (uid %uid, rid %rid)', array('%uid' => $uid, '%rid' => $rid));
  }

  if (lm_paypal_subscription_menu_rebuild()) {
    menu_rebuild();
  }
}


/**
 * Give the user the extra group
 *
 * @param $uid
 *   uid of the user to gain the role
 * @param $gid
 *   gid for the user to gain
 */
function lm_paypal_user_gain_group($uid, $gid) {
  og_save_subscription($gid, $uid, array('is_active' => 1));

  if ($_lm_paypal_debug) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Added user to group (uid %uid, gid %gid)', array('%uid' => $uid, '%gid' => $gid));
  }

  if (lm_paypal_subscription_menu_rebuild()) {
    menu_rebuild();
  }
}

/**
 * Drop the group from the user - ONLY if they have no other live
 * subscriptions that also give them this group.
 *
 * @param $uid
 *   uid of the user to loose the role
 * @param $gid
 *   gid for the user to loose
 */
function lm_paypal_user_loose_group($uid, $gid) {
  $also = db_query("SELECT * FROM {lm_paypal_subscriptions} d INNER JOIN {lm_paypal_subscribers} s ON d.subid = s.subid WHERE uid = %d AND rid = %d AND s.status = 1 AND d.kind = 2", $uid, $rid);
  if (db_result($also)) {
    if ($_lm_paypal_debug) {
      watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'User keeps group because of other subscriptions (uid %uid, gid %gid)', array('%uid' => $uid, '%gid' => $gid));
    }
    return;
  }

  og_delete_subscription($gid, $uid);

  if ($_lm_paypal_debug) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Drop user from group (uid %uid, gid %gid)', array('%uid' => $uid, '%gid' => $gid));
  }

  if (lm_paypal_subscription_menu_rebuild()) {
    menu_rebuild();
  }
}

/**
 * Implementation of hook_cron().
 */
function lm_paypal_subscriptions_cron() {
  if (lm_paypal_debug()) {
    watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'cron');
  }

  // Look for any subscriber who is near the end of their subscription

  // Find all live subscriptions
  $subs = db_query('SELECT * FROM {lm_paypal_subscriptions} WHERE status = 1');

  while ($so = db_fetch_object($subs)) {
    $item_name = $so->item_name;
    // Should I warn people near the end of this subscription?
    $nearend_days = $so->nearend_days;
    if (! ($nearend_days >= 1)) {
      // Not set, skip this subscription
      continue;
    }

    // Find how many days the subscription is supposed to last
    $duration = lm_paypal_subscription_days($so);

    if ($duration == 0) {
      // Infinite, skip this subscription
      continue;
    }

    // Find the seconds from start till I should warn
    $from_start = ($duration - $nearend_days) * (24 * 60 * 60);
    /*
    OK: This could be negative because cron wasn't fired off for some reason
        and the email wasn't sent
    if ($from_start < 0) {
       watchdog(LM_PAYPAL_SUBSCRIPTIONS, "cron $item_name from_start $from_start < 0");
      continue;
    }
    */

    $subid = $so->subid;

    // Find all the subscribers to this subscription
    $sbs = db_query("SELECT * FROM {lm_paypal_subscribers} WHERE status = 1 AND subid = %d", $subid);

    while ($sb = db_fetch_object($sbs)) {
      if ($sb->email_sent) {
        //watchdog(LM_PAYPAL_SUBSCRIPTIONS, "cron email_sent already");
        continue;
      }
      $usid = $sb->usid;
      $nid = $sb->nid;
      $uid = $sb->uid;
      $started = $sb->started;
      $send_after = $started + $from_start;
      $time = time();
      if ($send_after < $time) {
        //watchdog(LM_PAYPAL_SUBSCRIPTIONS, "cron email $item_name $uid $subid, update email_sent: started " . format_date($started, 'small') . ", duration " . $duration . ", nearend_days" . $nearend_days . ", send_after " . format_date($send_after, 'small') . ", now " . format_date($time, 'small'));

        // Email user to let them know their subscription is near its end
        //  note: t() will be called inside lm_paypal_mail_user
        // Extra variables (in addition to the default ones provided)
        if ($so->kind == 0 || $so->kind == 2) {
          $variables = array('%Subscription' => $so->item_name, '%Days' => $nearend_days, '%Node' => '');
        }
        else if ($so->kind == 1) {
          $variables = array('%Subscription' => $so->item_name, '%Days' => $nearend_days, '%Node' => $node);
        }
        lm_paypal_mail_user(
          $uid,
          $uid,
          $so->send_user_onnearend_subject,
          $so->send_user_onnearend_body,
          $variables);

        // Remember we've sent them an email!
        $update = db_query("UPDATE {lm_paypal_subscribers} SET email_sent = 1 WHERE usid = %d", $usid);
        if (!$update) {
          watchdog(LM_PAYPAL_SUBSCRIPTIONS, 'Failed to update to subscribers email_sent', array(), WATCHDOG_ERROR);
        }
      }
    }
  }
}
