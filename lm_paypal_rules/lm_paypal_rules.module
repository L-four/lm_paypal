<?php

function lm_paypal_rules_rules_event_info() {
  $items = array();
    $items['new_ipn'] = array(
      'label' => t('In comming IPN from paypal'),
      'group' => 'LM Paypal IPN',
      'variables' => array(
        'ipn' => array(
          'type' => 'ipn',
          'label' => t('ipn object'),
        ),
        'txn_type' => array(
          'type' => 'text',
          'label' => t('transaction type'),
        ),
      ),
    );
  return $items;
}

/*
 * implments hook_lm_paypal_ipn($ipn)
 */

function lm_paypal_rules_lm_paypal_ipn($ipn) {
  if (module_exists('rules')) {
    if(!$ipn->custom) {
      $custom = lm_paypal_unpack_ipn_custom($ipn);
      foreach ($custom as $k => $v) {
        $ipn->{$k} = $v;
      }
    }
    dpm($ipn);
    rules_invoke_event('new_ipn', $ipn, preg_replace('/[^a-z0-9_]*/', '', $ipn->txn_type));
  }
}

/*
 * implments hook_rules_data_info($ipn)
 */

function lm_paypal_rules_rules_data_info() {
  $rules_data = array(
    'ipn' => array(
      'label' => t('Paypal IPN'),
      'wrap' => FALSE,
      'property info' => lm_paypal_rules_ipn_property_info(),
      'token type' => 'ipn',
    ),
  );
  return $rules_data;
}

function lm_paypal_rules_ipn_property_info() {
  $schema = drupal_get_schema_unprocessed('lm_paypal', 'lm_paypal_ipns');
  $ipn_property_info = array();
  foreach ($schema['fields'] as $field => $values) {
    $ipn_property_info[$field] = array(
      'type' => lm_paypal_rules_type_convertion($values['type']),
      'label' => $values['description'],
      'setter callback' => 'entity_property_verbatim_set',
    );
  }
  return $ipn_property_info;
}


function lm_paypal_rules_type_convertion($type){
  switch ($type) {
    case 'int':
    case 'serial':
      return 'integer';
    break;
    case 'varchar':
    case 'text':
    default:
      return 'text';
    break;
    case 'numeric':
      return 'decimal';
    break;
  }
}

/**
 *
 * Implements hook_token_info
 *
 * Create Tokens for Tours
 *
 */

function lm_paypal_rules_token_info() {
  //Define a 'tour' token type
  $type = array(
    'name' => 'Paypal IPN',
    'description' => 'Tokens Related to Paypal IPNs',
    'needs-data' => 'ipn',
  );

  $schema = drupal_get_schema_unprocessed('lm_paypal', 'lm_paypal_ipns');

  $tokens = array();
  foreach ($schema['fields'] as $field => $values) {
    $tokens[$field] = array(
      'name' => $field,
      'description' => $values['description'],
    );
  }

  return array(
    'types' => array('ipn' => $type),
    'tokens' => array('ipn' => $tokens),
  );

}

/**
 * implements hook_tokens
 *
 */

function lm_paypal_rules_tokens($type, $tokens, array $data = array(), array $options = array()) {
   $replacements = array();   
   if ($type == 'ipn' && !empty($data['ipn'])) {
     $ipn = $data['ipn'];
     foreach ($tokens as $name => $original) {
       if ($name == "custom") { continue; } // let other modules deal with this custom data
       $replacements[$original] = (!empty($ipn->$name)) ? $ipn->$name : '';
     }
   }
   return $replacements;
}