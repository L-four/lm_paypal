<?php

function lm_paypal_rules_rules_event_info() {
  $items = array();
    $items['new_ipn'] = array(
      'label' => t('In comming IPN from paypal'),
      'group' => 'LM Paypal IPN',
      'variables' => array(
        'ipn' => array(
          'type' => 'ipn',
          'label' => t('ipn object'),
        ),
        'txn_type' => array(
          'type' => 'string',
          'label' => t('transaction type'),
        ),
      ),
    );
  return $items;
}

/*
 * implments hook_lm_paypal_ipn($ipn)
 */

function lm_paypal_rules_lm_paypal_ipn($ipn) {
  if (module_exists('rules')) {
    rules_invoke_event('new_ipn', $ipn, preg_replace('/[^a-z0-9_]*/', '', $ipn->txn_type));
  }
}

/*
 * implments hook_lm_paypal_ipn($ipn)
 */

function lm_paypal_rules_rules_data_info() {
    return array(
    'log_entry' => array(
      'label' => t('watchdog log entry'),
      'wrap' => TRUE,
      'property info' => lm_paypal_rules_ipn_property_info(),
    ),
  );
}

function lm_paypal_rules_ipn_property_info() {
  $schema = lm_paypal_schema();
  $ipn_property_info = array();
  foreach ($schema['lm_paypal_ipns']['fields'] as $field => $values) {
    $ipn_property_info[$field] = array(
      'type' => lm_paypal_rules_type_convertion($values['type']),
      'label' => $values['description'],
      'setter callback' => 'entity_property_verbatim_set',
    );
  }
  dpm($ipn_property_info);
  return $ipn_property_info;
}

function lm_paypal_rules_type_convertion($type){
  switch ($type) {
    case 'int':
      return 'integer';
    break;
    case 'text':
      return 'text';
    break;
    case 'varchar':
      return 'string';
    break;
    case 'numeric':
      return 'decimal';
    break;
    case 'serial':
      return 'integer';
    break;
    default:
      return 'text';
    break;
  }
}